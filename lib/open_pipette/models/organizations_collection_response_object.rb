=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class OrganizationsCollectionResponseObject
    # The full address of the organization
    attr_accessor :address

    # The sub-premise of the organization location
    attr_accessor :address_subpremise

    # The street number of the organization location
    attr_accessor :address_street_number

    # The route of the organization location
    attr_accessor :address_route

    # The sub-locality of the organization location
    attr_accessor :address_sublocality

    # The locality of the organization location
    attr_accessor :address_locality

    # The level 1 admin area of the organization location
    attr_accessor :address_admin_area_level_1

    # The level 2 admin area of the organization location
    attr_accessor :address_admin_area_level_2

    # The country of the organization location
    attr_accessor :address_country

    # The postal code of the organization location
    attr_accessor :address_postal_code

    # The formatted organization location
    attr_accessor :address_formatted_address

    # The ID of the organization
    attr_accessor :id

    # Whether the organization is active or not
    attr_accessor :active_flag

    # The ID of the owner
    attr_accessor :owner_id

    # The name of the organization
    attr_accessor :name

    # The last updated date and time of the organization. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :update_time

    # The date and time this organization was deleted. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :delete_time

    # The date and time when the organization was added/created. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :add_time

    # The visibility group ID of who can see the organization
    attr_accessor :visible_to

    # The label assigned to the organization
    attr_accessor :label

    # The BCC email associated with the organization
    attr_accessor :cc_email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'address_subpremise' => :'address_subpremise',
        :'address_street_number' => :'address_street_number',
        :'address_route' => :'address_route',
        :'address_sublocality' => :'address_sublocality',
        :'address_locality' => :'address_locality',
        :'address_admin_area_level_1' => :'address_admin_area_level_1',
        :'address_admin_area_level_2' => :'address_admin_area_level_2',
        :'address_country' => :'address_country',
        :'address_postal_code' => :'address_postal_code',
        :'address_formatted_address' => :'address_formatted_address',
        :'id' => :'id',
        :'active_flag' => :'active_flag',
        :'owner_id' => :'owner_id',
        :'name' => :'name',
        :'update_time' => :'update_time',
        :'delete_time' => :'delete_time',
        :'add_time' => :'add_time',
        :'visible_to' => :'visible_to',
        :'label' => :'label',
        :'cc_email' => :'cc_email'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address' => :'String',
        :'address_subpremise' => :'String',
        :'address_street_number' => :'String',
        :'address_route' => :'String',
        :'address_sublocality' => :'String',
        :'address_locality' => :'String',
        :'address_admin_area_level_1' => :'String',
        :'address_admin_area_level_2' => :'String',
        :'address_country' => :'String',
        :'address_postal_code' => :'String',
        :'address_formatted_address' => :'String',
        :'id' => :'Integer',
        :'active_flag' => :'Boolean',
        :'owner_id' => :'Integer',
        :'name' => :'String',
        :'update_time' => :'String',
        :'delete_time' => :'String',
        :'add_time' => :'String',
        :'visible_to' => :'String',
        :'label' => :'Integer',
        :'cc_email' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'delete_time',
        :'label',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::OrganizationsCollectionResponseObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::OrganizationsCollectionResponseObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address_subpremise')
        self.address_subpremise = attributes[:'address_subpremise']
      end

      if attributes.key?(:'address_street_number')
        self.address_street_number = attributes[:'address_street_number']
      end

      if attributes.key?(:'address_route')
        self.address_route = attributes[:'address_route']
      end

      if attributes.key?(:'address_sublocality')
        self.address_sublocality = attributes[:'address_sublocality']
      end

      if attributes.key?(:'address_locality')
        self.address_locality = attributes[:'address_locality']
      end

      if attributes.key?(:'address_admin_area_level_1')
        self.address_admin_area_level_1 = attributes[:'address_admin_area_level_1']
      end

      if attributes.key?(:'address_admin_area_level_2')
        self.address_admin_area_level_2 = attributes[:'address_admin_area_level_2']
      end

      if attributes.key?(:'address_country')
        self.address_country = attributes[:'address_country']
      end

      if attributes.key?(:'address_postal_code')
        self.address_postal_code = attributes[:'address_postal_code']
      end

      if attributes.key?(:'address_formatted_address')
        self.address_formatted_address = attributes[:'address_formatted_address']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'delete_time')
        self.delete_time = attributes[:'delete_time']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'visible_to')
        self.visible_to = attributes[:'visible_to']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'cc_email')
        self.cc_email = attributes[:'cc_email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          address_subpremise == o.address_subpremise &&
          address_street_number == o.address_street_number &&
          address_route == o.address_route &&
          address_sublocality == o.address_sublocality &&
          address_locality == o.address_locality &&
          address_admin_area_level_1 == o.address_admin_area_level_1 &&
          address_admin_area_level_2 == o.address_admin_area_level_2 &&
          address_country == o.address_country &&
          address_postal_code == o.address_postal_code &&
          address_formatted_address == o.address_formatted_address &&
          id == o.id &&
          active_flag == o.active_flag &&
          owner_id == o.owner_id &&
          name == o.name &&
          update_time == o.update_time &&
          delete_time == o.delete_time &&
          add_time == o.add_time &&
          visible_to == o.visible_to &&
          label == o.label &&
          cc_email == o.cc_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, address_subpremise, address_street_number, address_route, address_sublocality, address_locality, address_admin_area_level_1, address_admin_area_level_2, address_country, address_postal_code, address_formatted_address, id, active_flag, owner_id, name, update_time, delete_time, add_time, visible_to, label, cc_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
