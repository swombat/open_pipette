=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class UpdateDealRequest
    # The title of the deal
    attr_accessor :title

    # The value of the deal.
    attr_accessor :value

    # Array of the deal labels IDs.
    attr_accessor :label

    # The currency of the deal. Accepts a 3-character currency code.
    attr_accessor :currency

    # The ID of the user which will be the new owner of the deal.
    attr_accessor :user_id

    # The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first.
    attr_accessor :person_id

    # The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first.
    attr_accessor :org_id

    # The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.
    attr_accessor :pipeline_id

    # The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`.
    attr_accessor :stage_id

    # open = Open, won = Won, lost = Lost, deleted = Deleted.
    attr_accessor :status

    # The ID of Marketing channel this deal was created from. Provided value must be one of the channels configured for your company which you can fetch with <a href=\"https://developers.pipedrive.com/docs/api/v1/DealFields#getDealField\" target=\"_blank\" rel=\"noopener noreferrer\">GET /v1/dealFields</a>.
    attr_accessor :channel

    # The optional ID to further distinguish the Marketing channel.
    attr_accessor :channel_id

    # The optional date and time of changing the deal status as won in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Won. Can not be used together with `lost_time`.
    attr_accessor :won_time

    # The optional date and time of changing the deal status as lost in UTC. Format: YYYY-MM-DD HH:MM:SS. Can be set only when deal `status` is already Lost. Can not be used together with `won_time`.
    attr_accessor :lost_time

    # The optional date and time of closing the deal in UTC. Format: YYYY-MM-DD HH:MM:SS.
    attr_accessor :close_time

    # The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD.
    attr_accessor :expected_close_date

    # The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.
    attr_accessor :probability

    # The optional message about why the deal was lost (to be used when status = lost)
    attr_accessor :lost_reason

    attr_accessor :visible_to

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'value' => :'value',
        :'label' => :'label',
        :'currency' => :'currency',
        :'user_id' => :'user_id',
        :'person_id' => :'person_id',
        :'org_id' => :'org_id',
        :'pipeline_id' => :'pipeline_id',
        :'stage_id' => :'stage_id',
        :'status' => :'status',
        :'channel' => :'channel',
        :'channel_id' => :'channel_id',
        :'won_time' => :'won_time',
        :'lost_time' => :'lost_time',
        :'close_time' => :'close_time',
        :'expected_close_date' => :'expected_close_date',
        :'probability' => :'probability',
        :'lost_reason' => :'lost_reason',
        :'visible_to' => :'visible_to'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'String',
        :'value' => :'String',
        :'label' => :'Array<Integer>',
        :'currency' => :'String',
        :'user_id' => :'Integer',
        :'person_id' => :'Integer',
        :'org_id' => :'Integer',
        :'pipeline_id' => :'Integer',
        :'stage_id' => :'Integer',
        :'status' => :'String',
        :'channel' => :'Integer',
        :'channel_id' => :'String',
        :'won_time' => :'String',
        :'lost_time' => :'String',
        :'close_time' => :'String',
        :'expected_close_date' => :'Date',
        :'probability' => :'Float',
        :'lost_reason' => :'String',
        :'visible_to' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'channel',
        :'channel_id',
        :'close_time',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::UpdateDealRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::UpdateDealRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'label')
        if (value = attributes[:'label']).is_a?(Array)
          self.label = value
        end
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'person_id')
        self.person_id = attributes[:'person_id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'pipeline_id')
        self.pipeline_id = attributes[:'pipeline_id']
      end

      if attributes.key?(:'stage_id')
        self.stage_id = attributes[:'stage_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'won_time')
        self.won_time = attributes[:'won_time']
      end

      if attributes.key?(:'lost_time')
        self.lost_time = attributes[:'lost_time']
      end

      if attributes.key?(:'close_time')
        self.close_time = attributes[:'close_time']
      end

      if attributes.key?(:'expected_close_date')
        self.expected_close_date = attributes[:'expected_close_date']
      end

      if attributes.key?(:'probability')
        self.probability = attributes[:'probability']
      end

      if attributes.key?(:'lost_reason')
        self.lost_reason = attributes[:'lost_reason']
      end

      if attributes.key?(:'visible_to')
        self.visible_to = attributes[:'visible_to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["open", "won", "lost", "deleted"])
      return false unless status_validator.valid?(@status)
      visible_to_validator = EnumAttributeValidator.new('String', ["1", "3", "5", "7"])
      return false unless visible_to_validator.valid?(@visible_to)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["open", "won", "lost", "deleted"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] visible_to Object to be assigned
    def visible_to=(visible_to)
      validator = EnumAttributeValidator.new('String', ["1", "3", "5", "7"])
      unless validator.valid?(visible_to)
        fail ArgumentError, "invalid value for \"visible_to\", must be one of #{validator.allowable_values}."
      end
      @visible_to = visible_to
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          value == o.value &&
          label == o.label &&
          currency == o.currency &&
          user_id == o.user_id &&
          person_id == o.person_id &&
          org_id == o.org_id &&
          pipeline_id == o.pipeline_id &&
          stage_id == o.stage_id &&
          status == o.status &&
          channel == o.channel &&
          channel_id == o.channel_id &&
          won_time == o.won_time &&
          lost_time == o.lost_time &&
          close_time == o.close_time &&
          expected_close_date == o.expected_close_date &&
          probability == o.probability &&
          lost_reason == o.lost_reason &&
          visible_to == o.visible_to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, value, label, currency, user_id, person_id, org_id, pipeline_id, stage_id, status, channel, channel_id, won_time, lost_time, close_time, expected_close_date, probability, lost_reason, visible_to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
