=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class ResponseCallLogObject
    # The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.
    attr_accessor :user_id

    # If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.
    attr_accessor :activity_id

    # The name of the activity this call is attached to
    attr_accessor :subject

    # The duration of the call in seconds
    attr_accessor :duration

    # Describes the outcome of the call
    attr_accessor :outcome

    # The number that made the call
    attr_accessor :from_phone_number

    # The number called
    attr_accessor :to_phone_number

    # The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
    attr_accessor :start_time

    # The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
    attr_accessor :end_time

    # The ID of the person this call is associated with
    attr_accessor :person_id

    # The ID of the organization this call is associated with
    attr_accessor :org_id

    # The ID of the deal this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.
    attr_accessor :deal_id

    # The ID of the lead in the UUID format this call is associated with. A call log can be associated with either a deal or a lead, but not both at once.
    attr_accessor :lead_id

    # The note for the call log in HTML format
    attr_accessor :note

    # The call log ID, generated when the call log was created
    attr_accessor :id

    # If the call log has an audio recording attached, the value should be true
    attr_accessor :has_recording

    # The company ID of the owner of the call log
    attr_accessor :company_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'user_id',
        :'activity_id' => :'activity_id',
        :'subject' => :'subject',
        :'duration' => :'duration',
        :'outcome' => :'outcome',
        :'from_phone_number' => :'from_phone_number',
        :'to_phone_number' => :'to_phone_number',
        :'start_time' => :'start_time',
        :'end_time' => :'end_time',
        :'person_id' => :'person_id',
        :'org_id' => :'org_id',
        :'deal_id' => :'deal_id',
        :'lead_id' => :'lead_id',
        :'note' => :'note',
        :'id' => :'id',
        :'has_recording' => :'has_recording',
        :'company_id' => :'company_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'Integer',
        :'activity_id' => :'Integer',
        :'subject' => :'String',
        :'duration' => :'String',
        :'outcome' => :'String',
        :'from_phone_number' => :'String',
        :'to_phone_number' => :'String',
        :'start_time' => :'Time',
        :'end_time' => :'Time',
        :'person_id' => :'Integer',
        :'org_id' => :'Integer',
        :'deal_id' => :'Integer',
        :'lead_id' => :'String',
        :'note' => :'String',
        :'id' => :'String',
        :'has_recording' => :'Boolean',
        :'company_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::ResponseCallLogObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::ResponseCallLogObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'activity_id')
        self.activity_id = attributes[:'activity_id']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'outcome')
        self.outcome = attributes[:'outcome']
      else
        self.outcome = nil
      end

      if attributes.key?(:'from_phone_number')
        self.from_phone_number = attributes[:'from_phone_number']
      end

      if attributes.key?(:'to_phone_number')
        self.to_phone_number = attributes[:'to_phone_number']
      else
        self.to_phone_number = nil
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      else
        self.start_time = nil
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      else
        self.end_time = nil
      end

      if attributes.key?(:'person_id')
        self.person_id = attributes[:'person_id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'deal_id')
        self.deal_id = attributes[:'deal_id']
      end

      if attributes.key?(:'lead_id')
        self.lead_id = attributes[:'lead_id']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'has_recording')
        self.has_recording = attributes[:'has_recording']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @outcome.nil?
        invalid_properties.push('invalid value for "outcome", outcome cannot be nil.')
      end

      if @to_phone_number.nil?
        invalid_properties.push('invalid value for "to_phone_number", to_phone_number cannot be nil.')
      end

      if @start_time.nil?
        invalid_properties.push('invalid value for "start_time", start_time cannot be nil.')
      end

      if @end_time.nil?
        invalid_properties.push('invalid value for "end_time", end_time cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @outcome.nil?
      outcome_validator = EnumAttributeValidator.new('String', ["connected", "no_answer", "left_message", "left_voicemail", "wrong_number", "busy"])
      return false unless outcome_validator.valid?(@outcome)
      return false if @to_phone_number.nil?
      return false if @start_time.nil?
      return false if @end_time.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outcome Object to be assigned
    def outcome=(outcome)
      validator = EnumAttributeValidator.new('String', ["connected", "no_answer", "left_message", "left_voicemail", "wrong_number", "busy"])
      unless validator.valid?(outcome)
        fail ArgumentError, "invalid value for \"outcome\", must be one of #{validator.allowable_values}."
      end
      @outcome = outcome
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          activity_id == o.activity_id &&
          subject == o.subject &&
          duration == o.duration &&
          outcome == o.outcome &&
          from_phone_number == o.from_phone_number &&
          to_phone_number == o.to_phone_number &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          person_id == o.person_id &&
          org_id == o.org_id &&
          deal_id == o.deal_id &&
          lead_id == o.lead_id &&
          note == o.note &&
          id == o.id &&
          has_recording == o.has_recording &&
          company_id == o.company_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, activity_id, subject, duration, outcome, from_phone_number, to_phone_number, start_time, end_time, person_id, org_id, deal_id, lead_id, note, id, has_recording, company_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
