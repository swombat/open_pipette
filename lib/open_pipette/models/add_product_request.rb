=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class AddProductRequest
    # The name of the product
    attr_accessor :name

    # The product code
    attr_accessor :code

    # The product description
    attr_accessor :description

    # The unit in which this product is sold
    attr_accessor :unit

    # The tax percentage
    attr_accessor :tax

    # Whether this product will be made active or not
    attr_accessor :active_flag

    # Whether this product can be selected in deals or not
    attr_accessor :selectable

    attr_accessor :visible_to

    # The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used
    attr_accessor :owner_id

    # An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.
    attr_accessor :prices

    # Only available in Advanced and above plans  How often a customer is billed for access to a service or product 
    attr_accessor :billing_frequency

    # Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 312 
    attr_accessor :billing_frequency_cycles

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'code' => :'code',
        :'description' => :'description',
        :'unit' => :'unit',
        :'tax' => :'tax',
        :'active_flag' => :'active_flag',
        :'selectable' => :'selectable',
        :'visible_to' => :'visible_to',
        :'owner_id' => :'owner_id',
        :'prices' => :'prices',
        :'billing_frequency' => :'billing_frequency',
        :'billing_frequency_cycles' => :'billing_frequency_cycles'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'code' => :'String',
        :'description' => :'String',
        :'unit' => :'String',
        :'tax' => :'Float',
        :'active_flag' => :'Boolean',
        :'selectable' => :'Boolean',
        :'visible_to' => :'String',
        :'owner_id' => :'Integer',
        :'prices' => :'Array<Object>',
        :'billing_frequency' => :'String',
        :'billing_frequency_cycles' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'billing_frequency_cycles'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::AddProductRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::AddProductRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      else
        self.tax = 0
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      else
        self.active_flag = true
      end

      if attributes.key?(:'selectable')
        self.selectable = attributes[:'selectable']
      else
        self.selectable = true
      end

      if attributes.key?(:'visible_to')
        self.visible_to = attributes[:'visible_to']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'prices')
        if (value = attributes[:'prices']).is_a?(Array)
          self.prices = value
        end
      end

      if attributes.key?(:'billing_frequency')
        self.billing_frequency = attributes[:'billing_frequency']
      else
        self.billing_frequency = 'one-time'
      end

      if attributes.key?(:'billing_frequency_cycles')
        self.billing_frequency_cycles = attributes[:'billing_frequency_cycles']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      visible_to_validator = EnumAttributeValidator.new('String', ["1", "3", "5", "7"])
      return false unless visible_to_validator.valid?(@visible_to)
      billing_frequency_validator = EnumAttributeValidator.new('String', ["one-time", "annually", "semi-annually", "quarterly", "monthly", "weekly"])
      return false unless billing_frequency_validator.valid?(@billing_frequency)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] visible_to Object to be assigned
    def visible_to=(visible_to)
      validator = EnumAttributeValidator.new('String', ["1", "3", "5", "7"])
      unless validator.valid?(visible_to)
        fail ArgumentError, "invalid value for \"visible_to\", must be one of #{validator.allowable_values}."
      end
      @visible_to = visible_to
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_frequency Object to be assigned
    def billing_frequency=(billing_frequency)
      validator = EnumAttributeValidator.new('String', ["one-time", "annually", "semi-annually", "quarterly", "monthly", "weekly"])
      unless validator.valid?(billing_frequency)
        fail ArgumentError, "invalid value for \"billing_frequency\", must be one of #{validator.allowable_values}."
      end
      @billing_frequency = billing_frequency
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          code == o.code &&
          description == o.description &&
          unit == o.unit &&
          tax == o.tax &&
          active_flag == o.active_flag &&
          selectable == o.selectable &&
          visible_to == o.visible_to &&
          owner_id == o.owner_id &&
          prices == o.prices &&
          billing_frequency == o.billing_frequency &&
          billing_frequency_cycles == o.billing_frequency_cycles
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, code, description, unit, tax, active_flag, selectable, visible_to, owner_id, prices, billing_frequency, billing_frequency_cycles].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
