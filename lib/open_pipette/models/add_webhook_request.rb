=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class AddWebhookRequest
    # A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.
    attr_accessor :subscription_url

    # The type of action to receive notifications about. Wildcard will match all supported actions.
    attr_accessor :event_action

    # The type of object to receive notifications about. Wildcard will match all supported objects.
    attr_accessor :event_object

    # The ID of the user that this webhook will be authorized with. You have the option to use a different user's `user_id`. If it is not set, the current user's `user_id` will be used. As each webhook event is checked against a user's permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin userâ€™s `user_id`.
    attr_accessor :user_id

    # The HTTP basic auth username of the subscription URL endpoint (if required)
    attr_accessor :http_auth_user

    # The HTTP basic auth password of the subscription URL endpoint (if required)
    attr_accessor :http_auth_password

    # The webhook's version
    attr_accessor :version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscription_url' => :'subscription_url',
        :'event_action' => :'event_action',
        :'event_object' => :'event_object',
        :'user_id' => :'user_id',
        :'http_auth_user' => :'http_auth_user',
        :'http_auth_password' => :'http_auth_password',
        :'version' => :'version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscription_url' => :'String',
        :'event_action' => :'String',
        :'event_object' => :'String',
        :'user_id' => :'Integer',
        :'http_auth_user' => :'String',
        :'http_auth_password' => :'String',
        :'version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::AddWebhookRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::AddWebhookRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscription_url')
        self.subscription_url = attributes[:'subscription_url']
      else
        self.subscription_url = nil
      end

      if attributes.key?(:'event_action')
        self.event_action = attributes[:'event_action']
      else
        self.event_action = nil
      end

      if attributes.key?(:'event_object')
        self.event_object = attributes[:'event_object']
      else
        self.event_object = nil
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'http_auth_user')
        self.http_auth_user = attributes[:'http_auth_user']
      end

      if attributes.key?(:'http_auth_password')
        self.http_auth_password = attributes[:'http_auth_password']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = '1.0'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscription_url.nil?
        invalid_properties.push('invalid value for "subscription_url", subscription_url cannot be nil.')
      end

      if @event_action.nil?
        invalid_properties.push('invalid value for "event_action", event_action cannot be nil.')
      end

      if @event_object.nil?
        invalid_properties.push('invalid value for "event_object", event_object cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscription_url.nil?
      return false if @event_action.nil?
      event_action_validator = EnumAttributeValidator.new('String', ["added", "updated", "merged", "deleted", "*"])
      return false unless event_action_validator.valid?(@event_action)
      return false if @event_object.nil?
      event_object_validator = EnumAttributeValidator.new('String', ["activity", "activityType", "deal", "note", "organization", "person", "pipeline", "product", "stage", "user", "*"])
      return false unless event_object_validator.valid?(@event_object)
      version_validator = EnumAttributeValidator.new('String', ["1.0", "2.0"])
      return false unless version_validator.valid?(@version)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_action Object to be assigned
    def event_action=(event_action)
      validator = EnumAttributeValidator.new('String', ["added", "updated", "merged", "deleted", "*"])
      unless validator.valid?(event_action)
        fail ArgumentError, "invalid value for \"event_action\", must be one of #{validator.allowable_values}."
      end
      @event_action = event_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_object Object to be assigned
    def event_object=(event_object)
      validator = EnumAttributeValidator.new('String', ["activity", "activityType", "deal", "note", "organization", "person", "pipeline", "product", "stage", "user", "*"])
      unless validator.valid?(event_object)
        fail ArgumentError, "invalid value for \"event_object\", must be one of #{validator.allowable_values}."
      end
      @event_object = event_object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(version)
      validator = EnumAttributeValidator.new('String', ["1.0", "2.0"])
      unless validator.valid?(version)
        fail ArgumentError, "invalid value for \"version\", must be one of #{validator.allowable_values}."
      end
      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscription_url == o.subscription_url &&
          event_action == o.event_action &&
          event_object == o.event_object &&
          user_id == o.user_id &&
          http_auth_user == o.http_auth_user &&
          http_auth_password == o.http_auth_password &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscription_url, event_action, event_object, user_id, http_auth_user, http_auth_password, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
