=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class FieldsResponse200AllOfDataInner
    # The ID of the field. Value is `null` in case of subfields.
    attr_accessor :id

    # The key of the field. For custom fields this is generated upon creation.
    attr_accessor :key

    # The name of the field
    attr_accessor :name

    # The order number of the field
    attr_accessor :order_nr

    # The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>
    attr_accessor :field_type

    # The creation time of the field
    attr_accessor :add_time

    # The update time of the field
    attr_accessor :update_time

    # The ID of the user who created or most recently updated the field, only applicable for custom fields
    attr_accessor :last_updated_by_user_id

    # The ID of the user who created the field
    attr_accessor :created_by_user_id

    # The active flag of the field
    attr_accessor :active_flag

    # The edit flag of the field
    attr_accessor :edit_flag

    # Not used
    attr_accessor :index_visible_flag

    # Not used
    attr_accessor :details_visible_flag

    # Not used
    attr_accessor :add_visible_flag

    # Not used
    attr_accessor :important_flag

    # Whether or not the field of an item can be edited in bulk
    attr_accessor :bulk_edit_allowed

    # Whether or not items can be searched by this field
    attr_accessor :searchable_flag

    # Whether or not items can be filtered by this field
    attr_accessor :filtering_allowed

    # Whether or not items can be sorted by this field
    attr_accessor :sortable_flag

    # Whether or not the field is mandatory
    attr_accessor :mandatory_flag

    # The options of the field. When there are no options, `null` is returned.
    attr_accessor :options

    # The deleted options of the field. Only present when there is at least 1 deleted option.
    attr_accessor :options_deleted

    # Whether or not the field is a subfield of another field. Only present if field is subfield.
    attr_accessor :is_subfield

    # The subfields of the field. Only present when the field has subfields.
    attr_accessor :subfields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'key' => :'key',
        :'name' => :'name',
        :'order_nr' => :'order_nr',
        :'field_type' => :'field_type',
        :'add_time' => :'add_time',
        :'update_time' => :'update_time',
        :'last_updated_by_user_id' => :'last_updated_by_user_id',
        :'created_by_user_id' => :'created_by_user_id',
        :'active_flag' => :'active_flag',
        :'edit_flag' => :'edit_flag',
        :'index_visible_flag' => :'index_visible_flag',
        :'details_visible_flag' => :'details_visible_flag',
        :'add_visible_flag' => :'add_visible_flag',
        :'important_flag' => :'important_flag',
        :'bulk_edit_allowed' => :'bulk_edit_allowed',
        :'searchable_flag' => :'searchable_flag',
        :'filtering_allowed' => :'filtering_allowed',
        :'sortable_flag' => :'sortable_flag',
        :'mandatory_flag' => :'mandatory_flag',
        :'options' => :'options',
        :'options_deleted' => :'options_deleted',
        :'is_subfield' => :'is_subfield',
        :'subfields' => :'subfields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'key' => :'String',
        :'name' => :'String',
        :'order_nr' => :'Integer',
        :'field_type' => :'String',
        :'add_time' => :'Time',
        :'update_time' => :'Time',
        :'last_updated_by_user_id' => :'Integer',
        :'created_by_user_id' => :'Integer',
        :'active_flag' => :'Boolean',
        :'edit_flag' => :'Boolean',
        :'index_visible_flag' => :'Boolean',
        :'details_visible_flag' => :'Boolean',
        :'add_visible_flag' => :'Boolean',
        :'important_flag' => :'Boolean',
        :'bulk_edit_allowed' => :'Boolean',
        :'searchable_flag' => :'Boolean',
        :'filtering_allowed' => :'Boolean',
        :'sortable_flag' => :'Boolean',
        :'mandatory_flag' => :'Boolean',
        :'options' => :'Array<Object>',
        :'options_deleted' => :'Array<Object>',
        :'is_subfield' => :'Boolean',
        :'subfields' => :'Array<Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'options',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::FieldsResponse200AllOfDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::FieldsResponse200AllOfDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'order_nr')
        self.order_nr = attributes[:'order_nr']
      end

      if attributes.key?(:'field_type')
        self.field_type = attributes[:'field_type']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'last_updated_by_user_id')
        self.last_updated_by_user_id = attributes[:'last_updated_by_user_id']
      end

      if attributes.key?(:'created_by_user_id')
        self.created_by_user_id = attributes[:'created_by_user_id']
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'edit_flag')
        self.edit_flag = attributes[:'edit_flag']
      end

      if attributes.key?(:'index_visible_flag')
        self.index_visible_flag = attributes[:'index_visible_flag']
      end

      if attributes.key?(:'details_visible_flag')
        self.details_visible_flag = attributes[:'details_visible_flag']
      end

      if attributes.key?(:'add_visible_flag')
        self.add_visible_flag = attributes[:'add_visible_flag']
      end

      if attributes.key?(:'important_flag')
        self.important_flag = attributes[:'important_flag']
      end

      if attributes.key?(:'bulk_edit_allowed')
        self.bulk_edit_allowed = attributes[:'bulk_edit_allowed']
      end

      if attributes.key?(:'searchable_flag')
        self.searchable_flag = attributes[:'searchable_flag']
      end

      if attributes.key?(:'filtering_allowed')
        self.filtering_allowed = attributes[:'filtering_allowed']
      end

      if attributes.key?(:'sortable_flag')
        self.sortable_flag = attributes[:'sortable_flag']
      end

      if attributes.key?(:'mandatory_flag')
        self.mandatory_flag = attributes[:'mandatory_flag']
      end

      if attributes.key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.key?(:'options_deleted')
        if (value = attributes[:'options_deleted']).is_a?(Array)
          self.options_deleted = value
        end
      end

      if attributes.key?(:'is_subfield')
        self.is_subfield = attributes[:'is_subfield']
      end

      if attributes.key?(:'subfields')
        if (value = attributes[:'subfields']).is_a?(Array)
          self.subfields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      field_type_validator = EnumAttributeValidator.new('String', ["address", "date", "daterange", "double", "enum", "monetary", "org", "people", "phone", "set", "text", "time", "timerange", "user", "varchar", "varchar_auto", "visible_to"])
      return false unless field_type_validator.valid?(@field_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] field_type Object to be assigned
    def field_type=(field_type)
      validator = EnumAttributeValidator.new('String', ["address", "date", "daterange", "double", "enum", "monetary", "org", "people", "phone", "set", "text", "time", "timerange", "user", "varchar", "varchar_auto", "visible_to"])
      unless validator.valid?(field_type)
        fail ArgumentError, "invalid value for \"field_type\", must be one of #{validator.allowable_values}."
      end
      @field_type = field_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          key == o.key &&
          name == o.name &&
          order_nr == o.order_nr &&
          field_type == o.field_type &&
          add_time == o.add_time &&
          update_time == o.update_time &&
          last_updated_by_user_id == o.last_updated_by_user_id &&
          created_by_user_id == o.created_by_user_id &&
          active_flag == o.active_flag &&
          edit_flag == o.edit_flag &&
          index_visible_flag == o.index_visible_flag &&
          details_visible_flag == o.details_visible_flag &&
          add_visible_flag == o.add_visible_flag &&
          important_flag == o.important_flag &&
          bulk_edit_allowed == o.bulk_edit_allowed &&
          searchable_flag == o.searchable_flag &&
          filtering_allowed == o.filtering_allowed &&
          sortable_flag == o.sortable_flag &&
          mandatory_flag == o.mandatory_flag &&
          options == o.options &&
          options_deleted == o.options_deleted &&
          is_subfield == o.is_subfield &&
          subfields == o.subfields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, key, name, order_nr, field_type, add_time, update_time, last_updated_by_user_id, created_by_user_id, active_flag, edit_flag, index_visible_flag, details_visible_flag, add_visible_flag, important_flag, bulk_edit_allowed, searchable_flag, filtering_allowed, sortable_flag, mandatory_flag, options, options_deleted, is_subfield, subfields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
