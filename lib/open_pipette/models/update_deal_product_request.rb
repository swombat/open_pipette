=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class UpdateDealProductRequest
    # The ID of the product to use
    attr_accessor :product_id

    # The price at which this product will be added to the deal
    attr_accessor :item_price

    # How many items of this product will be added to the deal
    attr_accessor :quantity

    # The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
    attr_accessor :discount

    # The type of the discount's value
    attr_accessor :discount_type

    # The ID of the product variation to use. When omitted, no variation will be used
    attr_accessor :product_variation_id

    # A textual comment associated with this product-deal attachment
    attr_accessor :comments

    # The tax percentage
    attr_accessor :tax

    # The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount
    attr_accessor :tax_method

    # Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default
    attr_accessor :enabled_flag

    # Only available in Advanced and above plans  How often a customer is billed for access to a service or product  A deal can have up to 20 products attached with `billing_frequency` different than `one-time` 
    attr_accessor :billing_frequency

    # Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 312 
    attr_accessor :billing_frequency_cycles

    # Only available in Advanced and above plans  The billing start date. Must be between 15 years in the past and 15 years in the future 
    attr_accessor :billing_start_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_id' => :'product_id',
        :'item_price' => :'item_price',
        :'quantity' => :'quantity',
        :'discount' => :'discount',
        :'discount_type' => :'discount_type',
        :'product_variation_id' => :'product_variation_id',
        :'comments' => :'comments',
        :'tax' => :'tax',
        :'tax_method' => :'tax_method',
        :'enabled_flag' => :'enabled_flag',
        :'billing_frequency' => :'billing_frequency',
        :'billing_frequency_cycles' => :'billing_frequency_cycles',
        :'billing_start_date' => :'billing_start_date'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_id' => :'Integer',
        :'item_price' => :'Float',
        :'quantity' => :'Integer',
        :'discount' => :'Float',
        :'discount_type' => :'String',
        :'product_variation_id' => :'Integer',
        :'comments' => :'String',
        :'tax' => :'Float',
        :'tax_method' => :'String',
        :'enabled_flag' => :'Boolean',
        :'billing_frequency' => :'String',
        :'billing_frequency_cycles' => :'Integer',
        :'billing_start_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'billing_frequency_cycles',
        :'billing_start_date'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::UpdateDealProductRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::UpdateDealProductRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'item_price')
        self.item_price = attributes[:'item_price']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      else
        self.discount = 0
      end

      if attributes.key?(:'discount_type')
        self.discount_type = attributes[:'discount_type']
      else
        self.discount_type = 'percentage'
      end

      if attributes.key?(:'product_variation_id')
        self.product_variation_id = attributes[:'product_variation_id']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      else
        self.tax = 0
      end

      if attributes.key?(:'tax_method')
        self.tax_method = attributes[:'tax_method']
      end

      if attributes.key?(:'enabled_flag')
        self.enabled_flag = attributes[:'enabled_flag']
      else
        self.enabled_flag = true
      end

      if attributes.key?(:'billing_frequency')
        self.billing_frequency = attributes[:'billing_frequency']
      end

      if attributes.key?(:'billing_frequency_cycles')
        self.billing_frequency_cycles = attributes[:'billing_frequency_cycles']
      end

      if attributes.key?(:'billing_start_date')
        self.billing_start_date = attributes[:'billing_start_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      discount_type_validator = EnumAttributeValidator.new('String', ["percentage", "amount"])
      return false unless discount_type_validator.valid?(@discount_type)
      tax_method_validator = EnumAttributeValidator.new('String', ["exclusive", "inclusive", "none"])
      return false unless tax_method_validator.valid?(@tax_method)
      billing_frequency_validator = EnumAttributeValidator.new('String', ["one-time", "annually", "semi-annually", "quarterly", "monthly", "weekly"])
      return false unless billing_frequency_validator.valid?(@billing_frequency)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discount_type Object to be assigned
    def discount_type=(discount_type)
      validator = EnumAttributeValidator.new('String', ["percentage", "amount"])
      unless validator.valid?(discount_type)
        fail ArgumentError, "invalid value for \"discount_type\", must be one of #{validator.allowable_values}."
      end
      @discount_type = discount_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_method Object to be assigned
    def tax_method=(tax_method)
      validator = EnumAttributeValidator.new('String', ["exclusive", "inclusive", "none"])
      unless validator.valid?(tax_method)
        fail ArgumentError, "invalid value for \"tax_method\", must be one of #{validator.allowable_values}."
      end
      @tax_method = tax_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_frequency Object to be assigned
    def billing_frequency=(billing_frequency)
      validator = EnumAttributeValidator.new('String', ["one-time", "annually", "semi-annually", "quarterly", "monthly", "weekly"])
      unless validator.valid?(billing_frequency)
        fail ArgumentError, "invalid value for \"billing_frequency\", must be one of #{validator.allowable_values}."
      end
      @billing_frequency = billing_frequency
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_id == o.product_id &&
          item_price == o.item_price &&
          quantity == o.quantity &&
          discount == o.discount &&
          discount_type == o.discount_type &&
          product_variation_id == o.product_variation_id &&
          comments == o.comments &&
          tax == o.tax &&
          tax_method == o.tax_method &&
          enabled_flag == o.enabled_flag &&
          billing_frequency == o.billing_frequency &&
          billing_frequency_cycles == o.billing_frequency_cycles &&
          billing_start_date == o.billing_start_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_id, item_price, quantity, discount, discount_type, product_variation_id, comments, tax, tax_method, enabled_flag, billing_frequency, billing_frequency_cycles, billing_start_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
