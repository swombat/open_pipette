=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class GetAllMailMessagesOfMailThreadResponse200AllOfDataInner
    # ID of the mail thread
    attr_accessor :id

    # The connection account ID
    attr_accessor :account_id

    # ID of the user whom mail message will be assigned to
    attr_accessor :user_id

    # The subject
    attr_accessor :subject

    # A snippet
    attr_accessor :snippet

    attr_accessor :read_flag

    # Mail tracking status
    attr_accessor :mail_tracking_status

    attr_accessor :has_attachments_flag

    attr_accessor :has_inline_attachments_flag

    attr_accessor :has_real_attachments_flag

    attr_accessor :deleted_flag

    attr_accessor :synced_flag

    attr_accessor :smart_bcc_flag

    attr_accessor :mail_link_tracking_enabled_flag

    # Senders of the mail thread
    attr_accessor :from

    # Recipients of the mail thread
    attr_accessor :to

    # Participants of the Cc
    attr_accessor :cc

    # Participants of the Bcc
    attr_accessor :bcc

    # A link to the mail thread message
    attr_accessor :body_url

    # ID of the mail thread
    attr_accessor :mail_thread_id

    # If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.
    attr_accessor :draft

    attr_accessor :has_body_flag

    attr_accessor :sent_flag

    attr_accessor :sent_from_pipedrive_flag

    # The time when the mail message was received or created
    attr_accessor :message_time

    # The time when the mail message was inserted to database
    attr_accessor :add_time

    # The time when the mail message was updated in database received
    attr_accessor :update_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'account_id' => :'account_id',
        :'user_id' => :'user_id',
        :'subject' => :'subject',
        :'snippet' => :'snippet',
        :'read_flag' => :'read_flag',
        :'mail_tracking_status' => :'mail_tracking_status',
        :'has_attachments_flag' => :'has_attachments_flag',
        :'has_inline_attachments_flag' => :'has_inline_attachments_flag',
        :'has_real_attachments_flag' => :'has_real_attachments_flag',
        :'deleted_flag' => :'deleted_flag',
        :'synced_flag' => :'synced_flag',
        :'smart_bcc_flag' => :'smart_bcc_flag',
        :'mail_link_tracking_enabled_flag' => :'mail_link_tracking_enabled_flag',
        :'from' => :'from',
        :'to' => :'to',
        :'cc' => :'cc',
        :'bcc' => :'bcc',
        :'body_url' => :'body_url',
        :'mail_thread_id' => :'mail_thread_id',
        :'draft' => :'draft',
        :'has_body_flag' => :'has_body_flag',
        :'sent_flag' => :'sent_flag',
        :'sent_from_pipedrive_flag' => :'sent_from_pipedrive_flag',
        :'message_time' => :'message_time',
        :'add_time' => :'add_time',
        :'update_time' => :'update_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'account_id' => :'String',
        :'user_id' => :'Integer',
        :'subject' => :'String',
        :'snippet' => :'String',
        :'read_flag' => :'Float',
        :'mail_tracking_status' => :'String',
        :'has_attachments_flag' => :'Float',
        :'has_inline_attachments_flag' => :'Float',
        :'has_real_attachments_flag' => :'Float',
        :'deleted_flag' => :'Float',
        :'synced_flag' => :'Float',
        :'smart_bcc_flag' => :'Float',
        :'mail_link_tracking_enabled_flag' => :'Float',
        :'from' => :'Array<BaseMailThreadAllOfPartiesToInner>',
        :'to' => :'Array<BaseMailThreadAllOfPartiesToInner>',
        :'cc' => :'Array<BaseMailThreadAllOfPartiesToInner>',
        :'bcc' => :'Array<BaseMailThreadAllOfPartiesToInner>',
        :'body_url' => :'String',
        :'mail_thread_id' => :'Integer',
        :'draft' => :'String',
        :'has_body_flag' => :'Float',
        :'sent_flag' => :'Float',
        :'sent_from_pipedrive_flag' => :'Float',
        :'message_time' => :'Time',
        :'add_time' => :'Time',
        :'update_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'mail_tracking_status',
        :'draft',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetAllMailMessagesOfMailThreadResponse200AllOfDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetAllMailMessagesOfMailThreadResponse200AllOfDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'snippet')
        self.snippet = attributes[:'snippet']
      end

      if attributes.key?(:'read_flag')
        self.read_flag = attributes[:'read_flag']
      else
        self.read_flag = READ_FLAG::N0
      end

      if attributes.key?(:'mail_tracking_status')
        self.mail_tracking_status = attributes[:'mail_tracking_status']
      end

      if attributes.key?(:'has_attachments_flag')
        self.has_attachments_flag = attributes[:'has_attachments_flag']
      else
        self.has_attachments_flag = HAS_ATTACHMENTS_FLAG::N0
      end

      if attributes.key?(:'has_inline_attachments_flag')
        self.has_inline_attachments_flag = attributes[:'has_inline_attachments_flag']
      else
        self.has_inline_attachments_flag = HAS_INLINE_ATTACHMENTS_FLAG::N0
      end

      if attributes.key?(:'has_real_attachments_flag')
        self.has_real_attachments_flag = attributes[:'has_real_attachments_flag']
      else
        self.has_real_attachments_flag = HAS_REAL_ATTACHMENTS_FLAG::N0
      end

      if attributes.key?(:'deleted_flag')
        self.deleted_flag = attributes[:'deleted_flag']
      else
        self.deleted_flag = DELETED_FLAG::N0
      end

      if attributes.key?(:'synced_flag')
        self.synced_flag = attributes[:'synced_flag']
      else
        self.synced_flag = SYNCED_FLAG::N0
      end

      if attributes.key?(:'smart_bcc_flag')
        self.smart_bcc_flag = attributes[:'smart_bcc_flag']
      else
        self.smart_bcc_flag = SMART_BCC_FLAG::N0
      end

      if attributes.key?(:'mail_link_tracking_enabled_flag')
        self.mail_link_tracking_enabled_flag = attributes[:'mail_link_tracking_enabled_flag']
      else
        self.mail_link_tracking_enabled_flag = MAIL_LINK_TRACKING_ENABLED_FLAG::N0
      end

      if attributes.key?(:'from')
        if (value = attributes[:'from']).is_a?(Array)
          self.from = value
        end
      end

      if attributes.key?(:'to')
        if (value = attributes[:'to']).is_a?(Array)
          self.to = value
        end
      end

      if attributes.key?(:'cc')
        if (value = attributes[:'cc']).is_a?(Array)
          self.cc = value
        end
      end

      if attributes.key?(:'bcc')
        if (value = attributes[:'bcc']).is_a?(Array)
          self.bcc = value
        end
      end

      if attributes.key?(:'body_url')
        self.body_url = attributes[:'body_url']
      end

      if attributes.key?(:'mail_thread_id')
        self.mail_thread_id = attributes[:'mail_thread_id']
      end

      if attributes.key?(:'draft')
        self.draft = attributes[:'draft']
      end

      if attributes.key?(:'has_body_flag')
        self.has_body_flag = attributes[:'has_body_flag']
      else
        self.has_body_flag = HAS_BODY_FLAG::N0
      end

      if attributes.key?(:'sent_flag')
        self.sent_flag = attributes[:'sent_flag']
      else
        self.sent_flag = SENT_FLAG::N0
      end

      if attributes.key?(:'sent_from_pipedrive_flag')
        self.sent_from_pipedrive_flag = attributes[:'sent_from_pipedrive_flag']
      else
        self.sent_from_pipedrive_flag = SENT_FROM_PIPEDRIVE_FLAG::N0
      end

      if attributes.key?(:'message_time')
        self.message_time = attributes[:'message_time']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      read_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless read_flag_validator.valid?(@read_flag)
      has_attachments_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless has_attachments_flag_validator.valid?(@has_attachments_flag)
      has_inline_attachments_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless has_inline_attachments_flag_validator.valid?(@has_inline_attachments_flag)
      has_real_attachments_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless has_real_attachments_flag_validator.valid?(@has_real_attachments_flag)
      deleted_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless deleted_flag_validator.valid?(@deleted_flag)
      synced_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless synced_flag_validator.valid?(@synced_flag)
      smart_bcc_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless smart_bcc_flag_validator.valid?(@smart_bcc_flag)
      mail_link_tracking_enabled_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless mail_link_tracking_enabled_flag_validator.valid?(@mail_link_tracking_enabled_flag)
      has_body_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless has_body_flag_validator.valid?(@has_body_flag)
      sent_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless sent_flag_validator.valid?(@sent_flag)
      sent_from_pipedrive_flag_validator = EnumAttributeValidator.new('Float', [0, 1])
      return false unless sent_from_pipedrive_flag_validator.valid?(@sent_from_pipedrive_flag)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] read_flag Object to be assigned
    def read_flag=(read_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(read_flag)
        fail ArgumentError, "invalid value for \"read_flag\", must be one of #{validator.allowable_values}."
      end
      @read_flag = read_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_attachments_flag Object to be assigned
    def has_attachments_flag=(has_attachments_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(has_attachments_flag)
        fail ArgumentError, "invalid value for \"has_attachments_flag\", must be one of #{validator.allowable_values}."
      end
      @has_attachments_flag = has_attachments_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_inline_attachments_flag Object to be assigned
    def has_inline_attachments_flag=(has_inline_attachments_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(has_inline_attachments_flag)
        fail ArgumentError, "invalid value for \"has_inline_attachments_flag\", must be one of #{validator.allowable_values}."
      end
      @has_inline_attachments_flag = has_inline_attachments_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_real_attachments_flag Object to be assigned
    def has_real_attachments_flag=(has_real_attachments_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(has_real_attachments_flag)
        fail ArgumentError, "invalid value for \"has_real_attachments_flag\", must be one of #{validator.allowable_values}."
      end
      @has_real_attachments_flag = has_real_attachments_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deleted_flag Object to be assigned
    def deleted_flag=(deleted_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(deleted_flag)
        fail ArgumentError, "invalid value for \"deleted_flag\", must be one of #{validator.allowable_values}."
      end
      @deleted_flag = deleted_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] synced_flag Object to be assigned
    def synced_flag=(synced_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(synced_flag)
        fail ArgumentError, "invalid value for \"synced_flag\", must be one of #{validator.allowable_values}."
      end
      @synced_flag = synced_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smart_bcc_flag Object to be assigned
    def smart_bcc_flag=(smart_bcc_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(smart_bcc_flag)
        fail ArgumentError, "invalid value for \"smart_bcc_flag\", must be one of #{validator.allowable_values}."
      end
      @smart_bcc_flag = smart_bcc_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mail_link_tracking_enabled_flag Object to be assigned
    def mail_link_tracking_enabled_flag=(mail_link_tracking_enabled_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(mail_link_tracking_enabled_flag)
        fail ArgumentError, "invalid value for \"mail_link_tracking_enabled_flag\", must be one of #{validator.allowable_values}."
      end
      @mail_link_tracking_enabled_flag = mail_link_tracking_enabled_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_body_flag Object to be assigned
    def has_body_flag=(has_body_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(has_body_flag)
        fail ArgumentError, "invalid value for \"has_body_flag\", must be one of #{validator.allowable_values}."
      end
      @has_body_flag = has_body_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sent_flag Object to be assigned
    def sent_flag=(sent_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(sent_flag)
        fail ArgumentError, "invalid value for \"sent_flag\", must be one of #{validator.allowable_values}."
      end
      @sent_flag = sent_flag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sent_from_pipedrive_flag Object to be assigned
    def sent_from_pipedrive_flag=(sent_from_pipedrive_flag)
      validator = EnumAttributeValidator.new('Float', [0, 1])
      unless validator.valid?(sent_from_pipedrive_flag)
        fail ArgumentError, "invalid value for \"sent_from_pipedrive_flag\", must be one of #{validator.allowable_values}."
      end
      @sent_from_pipedrive_flag = sent_from_pipedrive_flag
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          account_id == o.account_id &&
          user_id == o.user_id &&
          subject == o.subject &&
          snippet == o.snippet &&
          read_flag == o.read_flag &&
          mail_tracking_status == o.mail_tracking_status &&
          has_attachments_flag == o.has_attachments_flag &&
          has_inline_attachments_flag == o.has_inline_attachments_flag &&
          has_real_attachments_flag == o.has_real_attachments_flag &&
          deleted_flag == o.deleted_flag &&
          synced_flag == o.synced_flag &&
          smart_bcc_flag == o.smart_bcc_flag &&
          mail_link_tracking_enabled_flag == o.mail_link_tracking_enabled_flag &&
          from == o.from &&
          to == o.to &&
          cc == o.cc &&
          bcc == o.bcc &&
          body_url == o.body_url &&
          mail_thread_id == o.mail_thread_id &&
          draft == o.draft &&
          has_body_flag == o.has_body_flag &&
          sent_flag == o.sent_flag &&
          sent_from_pipedrive_flag == o.sent_from_pipedrive_flag &&
          message_time == o.message_time &&
          add_time == o.add_time &&
          update_time == o.update_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, account_id, user_id, subject, snippet, read_flag, mail_tracking_status, has_attachments_flag, has_inline_attachments_flag, has_real_attachments_flag, deleted_flag, synced_flag, smart_bcc_flag, mail_link_tracking_enabled_flag, from, to, cc, bcc, body_url, mail_thread_id, draft, has_body_flag, sent_flag, sent_from_pipedrive_flag, message_time, add_time, update_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
