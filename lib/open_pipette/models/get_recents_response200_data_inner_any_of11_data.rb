=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class GetRecentsResponse200DataInnerAnyOf11Data
    # The user ID
    attr_accessor :id

    # The user name
    attr_accessor :name

    # The user default currency
    attr_accessor :default_currency

    # The user locale
    attr_accessor :locale

    # The user language ID
    attr_accessor :lang

    # The user email
    attr_accessor :email

    # The user phone
    attr_accessor :phone

    # Boolean that indicates whether the user is activated
    attr_accessor :activated

    # The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :last_login

    # The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :created

    # The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :modified

    # Boolean that indicates whether the user has created a company
    attr_accessor :has_created_company

    attr_accessor :access

    # Boolean that indicates whether the user is activated
    attr_accessor :active_flag

    # The user timezone name
    attr_accessor :timezone_name

    # The user timezone offset
    attr_accessor :timezone_offset

    # The ID of the user role
    attr_accessor :role_id

    # The user icon URL
    attr_accessor :icon_url

    # Boolean that indicates if the requested user is the same which is logged in (in this case, always true)
    attr_accessor :is_you

    # Boolean that indicates whether the user is deleted from the company
    attr_accessor :is_deleted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'default_currency' => :'default_currency',
        :'locale' => :'locale',
        :'lang' => :'lang',
        :'email' => :'email',
        :'phone' => :'phone',
        :'activated' => :'activated',
        :'last_login' => :'last_login',
        :'created' => :'created',
        :'modified' => :'modified',
        :'has_created_company' => :'has_created_company',
        :'access' => :'access',
        :'active_flag' => :'active_flag',
        :'timezone_name' => :'timezone_name',
        :'timezone_offset' => :'timezone_offset',
        :'role_id' => :'role_id',
        :'icon_url' => :'icon_url',
        :'is_you' => :'is_you',
        :'is_deleted' => :'is_deleted'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'default_currency' => :'String',
        :'locale' => :'String',
        :'lang' => :'Integer',
        :'email' => :'String',
        :'phone' => :'String',
        :'activated' => :'Boolean',
        :'last_login' => :'String',
        :'created' => :'String',
        :'modified' => :'String',
        :'has_created_company' => :'Boolean',
        :'access' => :'Array<GetRecentsResponse200DataInnerAnyOf11DataAccessInner>',
        :'active_flag' => :'Boolean',
        :'timezone_name' => :'String',
        :'timezone_offset' => :'String',
        :'role_id' => :'Integer',
        :'icon_url' => :'String',
        :'is_you' => :'Boolean',
        :'is_deleted' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'phone',
        :'modified',
        :'icon_url',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetRecentsResponse200DataInnerAnyOf11Data` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetRecentsResponse200DataInnerAnyOf11Data`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'default_currency')
        self.default_currency = attributes[:'default_currency']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'lang')
        self.lang = attributes[:'lang']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'activated')
        self.activated = attributes[:'activated']
      end

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'has_created_company')
        self.has_created_company = attributes[:'has_created_company']
      end

      if attributes.key?(:'access')
        if (value = attributes[:'access']).is_a?(Array)
          self.access = value
        end
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'timezone_name')
        self.timezone_name = attributes[:'timezone_name']
      end

      if attributes.key?(:'timezone_offset')
        self.timezone_offset = attributes[:'timezone_offset']
      end

      if attributes.key?(:'role_id')
        self.role_id = attributes[:'role_id']
      end

      if attributes.key?(:'icon_url')
        self.icon_url = attributes[:'icon_url']
      end

      if attributes.key?(:'is_you')
        self.is_you = attributes[:'is_you']
      end

      if attributes.key?(:'is_deleted')
        self.is_deleted = attributes[:'is_deleted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          default_currency == o.default_currency &&
          locale == o.locale &&
          lang == o.lang &&
          email == o.email &&
          phone == o.phone &&
          activated == o.activated &&
          last_login == o.last_login &&
          created == o.created &&
          modified == o.modified &&
          has_created_company == o.has_created_company &&
          access == o.access &&
          active_flag == o.active_flag &&
          timezone_name == o.timezone_name &&
          timezone_offset == o.timezone_offset &&
          role_id == o.role_id &&
          icon_url == o.icon_url &&
          is_you == o.is_you &&
          is_deleted == o.is_deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, default_currency, locale, lang, email, phone, activated, last_login, created, modified, has_created_company, access, active_flag, timezone_name, timezone_offset, role_id, icon_url, is_you, is_deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
