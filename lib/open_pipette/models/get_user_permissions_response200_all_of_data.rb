=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class GetUserPermissionsResponse200AllOfData
    # If the user can add custom fields
    attr_accessor :can_add_custom_fields

    # If the user can add products
    attr_accessor :can_add_products

    # If the user can add prospects as leads
    attr_accessor :can_add_prospects_as_leads

    # If the user can bulk edit items
    attr_accessor :can_bulk_edit_items

    # If the user can change visibility of items
    attr_accessor :can_change_visibility_of_items

    # If the user can convert deals to leads
    attr_accessor :can_convert_deals_to_leads

    # If the user can create workflows
    attr_accessor :can_create_own_workflow

    # If the user can delete activities
    attr_accessor :can_delete_activities

    # If the user can delete custom fields
    attr_accessor :can_delete_custom_fields

    # If the user can delete deals
    attr_accessor :can_delete_deals

    # If the user can edit custom fields
    attr_accessor :can_edit_custom_fields

    # If the user can edit deals' closed date
    attr_accessor :can_edit_deals_closed_date

    # If the user can edit products
    attr_accessor :can_edit_products

    # If the user can edit shared filters
    attr_accessor :can_edit_shared_filters

    # If the user can export data from item lists
    attr_accessor :can_export_data_from_lists

    # If the user can follow other users
    attr_accessor :can_follow_other_users

    # If the user can merge deals
    attr_accessor :can_merge_deals

    # If the user can merge organizations
    attr_accessor :can_merge_organizations

    # If the user can merge people
    attr_accessor :can_merge_people

    # If the user can modify labels
    attr_accessor :can_modify_labels

    # If the user can see company-wide statistics
    attr_accessor :can_see_company_wide_statistics

    # If the user can see the summary on the deals page
    attr_accessor :can_see_deals_list_summary

    # If the user can see the names of hidden items
    attr_accessor :can_see_hidden_items_names

    # If the user can see other users
    attr_accessor :can_see_other_users

    # If the user can see other users' statistics
    attr_accessor :can_see_other_users_statistics

    # If the user can see security dashboard
    attr_accessor :can_see_security_dashboard

    # If the user can share filters
    attr_accessor :can_share_filters

    # If the user can share insights
    attr_accessor :can_share_insights

    # If the user can use API
    attr_accessor :can_use_api

    # If the user can use email tracking
    attr_accessor :can_use_email_tracking

    # If the user can use import
    attr_accessor :can_use_import

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'can_add_custom_fields' => :'can_add_custom_fields',
        :'can_add_products' => :'can_add_products',
        :'can_add_prospects_as_leads' => :'can_add_prospects_as_leads',
        :'can_bulk_edit_items' => :'can_bulk_edit_items',
        :'can_change_visibility_of_items' => :'can_change_visibility_of_items',
        :'can_convert_deals_to_leads' => :'can_convert_deals_to_leads',
        :'can_create_own_workflow' => :'can_create_own_workflow',
        :'can_delete_activities' => :'can_delete_activities',
        :'can_delete_custom_fields' => :'can_delete_custom_fields',
        :'can_delete_deals' => :'can_delete_deals',
        :'can_edit_custom_fields' => :'can_edit_custom_fields',
        :'can_edit_deals_closed_date' => :'can_edit_deals_closed_date',
        :'can_edit_products' => :'can_edit_products',
        :'can_edit_shared_filters' => :'can_edit_shared_filters',
        :'can_export_data_from_lists' => :'can_export_data_from_lists',
        :'can_follow_other_users' => :'can_follow_other_users',
        :'can_merge_deals' => :'can_merge_deals',
        :'can_merge_organizations' => :'can_merge_organizations',
        :'can_merge_people' => :'can_merge_people',
        :'can_modify_labels' => :'can_modify_labels',
        :'can_see_company_wide_statistics' => :'can_see_company_wide_statistics',
        :'can_see_deals_list_summary' => :'can_see_deals_list_summary',
        :'can_see_hidden_items_names' => :'can_see_hidden_items_names',
        :'can_see_other_users' => :'can_see_other_users',
        :'can_see_other_users_statistics' => :'can_see_other_users_statistics',
        :'can_see_security_dashboard' => :'can_see_security_dashboard',
        :'can_share_filters' => :'can_share_filters',
        :'can_share_insights' => :'can_share_insights',
        :'can_use_api' => :'can_use_api',
        :'can_use_email_tracking' => :'can_use_email_tracking',
        :'can_use_import' => :'can_use_import'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'can_add_custom_fields' => :'Boolean',
        :'can_add_products' => :'Boolean',
        :'can_add_prospects_as_leads' => :'Boolean',
        :'can_bulk_edit_items' => :'Boolean',
        :'can_change_visibility_of_items' => :'Boolean',
        :'can_convert_deals_to_leads' => :'Boolean',
        :'can_create_own_workflow' => :'Boolean',
        :'can_delete_activities' => :'Boolean',
        :'can_delete_custom_fields' => :'Boolean',
        :'can_delete_deals' => :'Boolean',
        :'can_edit_custom_fields' => :'Boolean',
        :'can_edit_deals_closed_date' => :'Boolean',
        :'can_edit_products' => :'Boolean',
        :'can_edit_shared_filters' => :'Boolean',
        :'can_export_data_from_lists' => :'Boolean',
        :'can_follow_other_users' => :'Boolean',
        :'can_merge_deals' => :'Boolean',
        :'can_merge_organizations' => :'Boolean',
        :'can_merge_people' => :'Boolean',
        :'can_modify_labels' => :'Boolean',
        :'can_see_company_wide_statistics' => :'Boolean',
        :'can_see_deals_list_summary' => :'Boolean',
        :'can_see_hidden_items_names' => :'Boolean',
        :'can_see_other_users' => :'Boolean',
        :'can_see_other_users_statistics' => :'Boolean',
        :'can_see_security_dashboard' => :'Boolean',
        :'can_share_filters' => :'Boolean',
        :'can_share_insights' => :'Boolean',
        :'can_use_api' => :'Boolean',
        :'can_use_email_tracking' => :'Boolean',
        :'can_use_import' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetUserPermissionsResponse200AllOfData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetUserPermissionsResponse200AllOfData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'can_add_custom_fields')
        self.can_add_custom_fields = attributes[:'can_add_custom_fields']
      end

      if attributes.key?(:'can_add_products')
        self.can_add_products = attributes[:'can_add_products']
      end

      if attributes.key?(:'can_add_prospects_as_leads')
        self.can_add_prospects_as_leads = attributes[:'can_add_prospects_as_leads']
      end

      if attributes.key?(:'can_bulk_edit_items')
        self.can_bulk_edit_items = attributes[:'can_bulk_edit_items']
      end

      if attributes.key?(:'can_change_visibility_of_items')
        self.can_change_visibility_of_items = attributes[:'can_change_visibility_of_items']
      end

      if attributes.key?(:'can_convert_deals_to_leads')
        self.can_convert_deals_to_leads = attributes[:'can_convert_deals_to_leads']
      end

      if attributes.key?(:'can_create_own_workflow')
        self.can_create_own_workflow = attributes[:'can_create_own_workflow']
      end

      if attributes.key?(:'can_delete_activities')
        self.can_delete_activities = attributes[:'can_delete_activities']
      end

      if attributes.key?(:'can_delete_custom_fields')
        self.can_delete_custom_fields = attributes[:'can_delete_custom_fields']
      end

      if attributes.key?(:'can_delete_deals')
        self.can_delete_deals = attributes[:'can_delete_deals']
      end

      if attributes.key?(:'can_edit_custom_fields')
        self.can_edit_custom_fields = attributes[:'can_edit_custom_fields']
      end

      if attributes.key?(:'can_edit_deals_closed_date')
        self.can_edit_deals_closed_date = attributes[:'can_edit_deals_closed_date']
      end

      if attributes.key?(:'can_edit_products')
        self.can_edit_products = attributes[:'can_edit_products']
      end

      if attributes.key?(:'can_edit_shared_filters')
        self.can_edit_shared_filters = attributes[:'can_edit_shared_filters']
      end

      if attributes.key?(:'can_export_data_from_lists')
        self.can_export_data_from_lists = attributes[:'can_export_data_from_lists']
      end

      if attributes.key?(:'can_follow_other_users')
        self.can_follow_other_users = attributes[:'can_follow_other_users']
      end

      if attributes.key?(:'can_merge_deals')
        self.can_merge_deals = attributes[:'can_merge_deals']
      end

      if attributes.key?(:'can_merge_organizations')
        self.can_merge_organizations = attributes[:'can_merge_organizations']
      end

      if attributes.key?(:'can_merge_people')
        self.can_merge_people = attributes[:'can_merge_people']
      end

      if attributes.key?(:'can_modify_labels')
        self.can_modify_labels = attributes[:'can_modify_labels']
      end

      if attributes.key?(:'can_see_company_wide_statistics')
        self.can_see_company_wide_statistics = attributes[:'can_see_company_wide_statistics']
      end

      if attributes.key?(:'can_see_deals_list_summary')
        self.can_see_deals_list_summary = attributes[:'can_see_deals_list_summary']
      end

      if attributes.key?(:'can_see_hidden_items_names')
        self.can_see_hidden_items_names = attributes[:'can_see_hidden_items_names']
      end

      if attributes.key?(:'can_see_other_users')
        self.can_see_other_users = attributes[:'can_see_other_users']
      end

      if attributes.key?(:'can_see_other_users_statistics')
        self.can_see_other_users_statistics = attributes[:'can_see_other_users_statistics']
      end

      if attributes.key?(:'can_see_security_dashboard')
        self.can_see_security_dashboard = attributes[:'can_see_security_dashboard']
      end

      if attributes.key?(:'can_share_filters')
        self.can_share_filters = attributes[:'can_share_filters']
      end

      if attributes.key?(:'can_share_insights')
        self.can_share_insights = attributes[:'can_share_insights']
      end

      if attributes.key?(:'can_use_api')
        self.can_use_api = attributes[:'can_use_api']
      end

      if attributes.key?(:'can_use_email_tracking')
        self.can_use_email_tracking = attributes[:'can_use_email_tracking']
      end

      if attributes.key?(:'can_use_import')
        self.can_use_import = attributes[:'can_use_import']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          can_add_custom_fields == o.can_add_custom_fields &&
          can_add_products == o.can_add_products &&
          can_add_prospects_as_leads == o.can_add_prospects_as_leads &&
          can_bulk_edit_items == o.can_bulk_edit_items &&
          can_change_visibility_of_items == o.can_change_visibility_of_items &&
          can_convert_deals_to_leads == o.can_convert_deals_to_leads &&
          can_create_own_workflow == o.can_create_own_workflow &&
          can_delete_activities == o.can_delete_activities &&
          can_delete_custom_fields == o.can_delete_custom_fields &&
          can_delete_deals == o.can_delete_deals &&
          can_edit_custom_fields == o.can_edit_custom_fields &&
          can_edit_deals_closed_date == o.can_edit_deals_closed_date &&
          can_edit_products == o.can_edit_products &&
          can_edit_shared_filters == o.can_edit_shared_filters &&
          can_export_data_from_lists == o.can_export_data_from_lists &&
          can_follow_other_users == o.can_follow_other_users &&
          can_merge_deals == o.can_merge_deals &&
          can_merge_organizations == o.can_merge_organizations &&
          can_merge_people == o.can_merge_people &&
          can_modify_labels == o.can_modify_labels &&
          can_see_company_wide_statistics == o.can_see_company_wide_statistics &&
          can_see_deals_list_summary == o.can_see_deals_list_summary &&
          can_see_hidden_items_names == o.can_see_hidden_items_names &&
          can_see_other_users == o.can_see_other_users &&
          can_see_other_users_statistics == o.can_see_other_users_statistics &&
          can_see_security_dashboard == o.can_see_security_dashboard &&
          can_share_filters == o.can_share_filters &&
          can_share_insights == o.can_share_insights &&
          can_use_api == o.can_use_api &&
          can_use_email_tracking == o.can_use_email_tracking &&
          can_use_import == o.can_use_import
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [can_add_custom_fields, can_add_products, can_add_prospects_as_leads, can_bulk_edit_items, can_change_visibility_of_items, can_convert_deals_to_leads, can_create_own_workflow, can_delete_activities, can_delete_custom_fields, can_delete_deals, can_edit_custom_fields, can_edit_deals_closed_date, can_edit_products, can_edit_shared_filters, can_export_data_from_lists, can_follow_other_users, can_merge_deals, can_merge_organizations, can_merge_people, can_modify_labels, can_see_company_wide_statistics, can_see_deals_list_summary, can_see_hidden_items_names, can_see_other_users, can_see_other_users_statistics, can_see_security_dashboard, can_share_filters, can_share_insights, can_use_api, can_use_email_tracking, can_use_import].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
