=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  # The file data
  class GetFilesResponse200DataInner
    # The ID of the file
    attr_accessor :id

    # The ID of the user to associate the file with
    attr_accessor :user_id

    # The ID of the deal to associate the file with
    attr_accessor :deal_id

    # The ID of the person to associate the file with
    attr_accessor :person_id

    # The ID of the organization to associate the file with
    attr_accessor :org_id

    # The ID of the product to associate the file with
    attr_accessor :product_id

    # The ID of the activity to associate the file with
    attr_accessor :activity_id

    # The ID of the lead to associate the file with
    attr_accessor :lead_id

    # The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :add_time

    # The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS
    attr_accessor :update_time

    # The original name of the file
    attr_accessor :file_name

    # The size of the file
    attr_accessor :file_size

    # Whether the user is active or not. false = Not activated, true = Activated
    attr_accessor :active_flag

    # Whether the file was uploaded as inline or not
    attr_accessor :inline_flag

    # The location type to send the file to. Only googledrive is supported at the moment.
    attr_accessor :remote_location

    # The ID of the remote item
    attr_accessor :remote_id

    # The ID of the inline attachment
    attr_accessor :cid

    # The location of the cloud storage
    attr_accessor :s3_bucket

    # The ID of the mail message to associate the file with
    attr_accessor :mail_message_id

    # The ID of the mail template to associate the file with
    attr_accessor :mail_template_id

    # The name of the deal associated with the file
    attr_accessor :deal_name

    # The name of the person associated with the file
    attr_accessor :person_name

    # The name of the organization associated with the file
    attr_accessor :org_name

    # The name of the product associated with the file
    attr_accessor :product_name

    # The name of the lead associated with the file
    attr_accessor :lead_name

    # The URL of the download file
    attr_accessor :url

    # The visible name of the file
    attr_accessor :name

    # The description of the file
    attr_accessor :description

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'user_id' => :'user_id',
        :'deal_id' => :'deal_id',
        :'person_id' => :'person_id',
        :'org_id' => :'org_id',
        :'product_id' => :'product_id',
        :'activity_id' => :'activity_id',
        :'lead_id' => :'lead_id',
        :'add_time' => :'add_time',
        :'update_time' => :'update_time',
        :'file_name' => :'file_name',
        :'file_size' => :'file_size',
        :'active_flag' => :'active_flag',
        :'inline_flag' => :'inline_flag',
        :'remote_location' => :'remote_location',
        :'remote_id' => :'remote_id',
        :'cid' => :'cid',
        :'s3_bucket' => :'s3_bucket',
        :'mail_message_id' => :'mail_message_id',
        :'mail_template_id' => :'mail_template_id',
        :'deal_name' => :'deal_name',
        :'person_name' => :'person_name',
        :'org_name' => :'org_name',
        :'product_name' => :'product_name',
        :'lead_name' => :'lead_name',
        :'url' => :'url',
        :'name' => :'name',
        :'description' => :'description'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'user_id' => :'Integer',
        :'deal_id' => :'Integer',
        :'person_id' => :'Integer',
        :'org_id' => :'Integer',
        :'product_id' => :'Integer',
        :'activity_id' => :'Integer',
        :'lead_id' => :'String',
        :'add_time' => :'String',
        :'update_time' => :'String',
        :'file_name' => :'String',
        :'file_size' => :'Integer',
        :'active_flag' => :'Boolean',
        :'inline_flag' => :'Boolean',
        :'remote_location' => :'String',
        :'remote_id' => :'String',
        :'cid' => :'String',
        :'s3_bucket' => :'String',
        :'mail_message_id' => :'String',
        :'mail_template_id' => :'String',
        :'deal_name' => :'String',
        :'person_name' => :'String',
        :'org_name' => :'String',
        :'product_name' => :'String',
        :'lead_name' => :'String',
        :'url' => :'String',
        :'name' => :'String',
        :'description' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetFilesResponse200DataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetFilesResponse200DataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'deal_id')
        self.deal_id = attributes[:'deal_id']
      end

      if attributes.key?(:'person_id')
        self.person_id = attributes[:'person_id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'activity_id')
        self.activity_id = attributes[:'activity_id']
      end

      if attributes.key?(:'lead_id')
        self.lead_id = attributes[:'lead_id']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'file_name')
        self.file_name = attributes[:'file_name']
      end

      if attributes.key?(:'file_size')
        self.file_size = attributes[:'file_size']
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'inline_flag')
        self.inline_flag = attributes[:'inline_flag']
      end

      if attributes.key?(:'remote_location')
        self.remote_location = attributes[:'remote_location']
      end

      if attributes.key?(:'remote_id')
        self.remote_id = attributes[:'remote_id']
      end

      if attributes.key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.key?(:'s3_bucket')
        self.s3_bucket = attributes[:'s3_bucket']
      end

      if attributes.key?(:'mail_message_id')
        self.mail_message_id = attributes[:'mail_message_id']
      end

      if attributes.key?(:'mail_template_id')
        self.mail_template_id = attributes[:'mail_template_id']
      end

      if attributes.key?(:'deal_name')
        self.deal_name = attributes[:'deal_name']
      end

      if attributes.key?(:'person_name')
        self.person_name = attributes[:'person_name']
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      end

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'lead_name')
        self.lead_name = attributes[:'lead_name']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          user_id == o.user_id &&
          deal_id == o.deal_id &&
          person_id == o.person_id &&
          org_id == o.org_id &&
          product_id == o.product_id &&
          activity_id == o.activity_id &&
          lead_id == o.lead_id &&
          add_time == o.add_time &&
          update_time == o.update_time &&
          file_name == o.file_name &&
          file_size == o.file_size &&
          active_flag == o.active_flag &&
          inline_flag == o.inline_flag &&
          remote_location == o.remote_location &&
          remote_id == o.remote_id &&
          cid == o.cid &&
          s3_bucket == o.s3_bucket &&
          mail_message_id == o.mail_message_id &&
          mail_template_id == o.mail_template_id &&
          deal_name == o.deal_name &&
          person_name == o.person_name &&
          org_name == o.org_name &&
          product_name == o.product_name &&
          lead_name == o.lead_name &&
          url == o.url &&
          name == o.name &&
          description == o.description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, user_id, deal_id, person_id, org_id, product_id, activity_id, lead_id, add_time, update_time, file_name, file_size, active_flag, inline_flag, remote_location, remote_id, cid, s3_bucket, mail_message_id, mail_template_id, deal_name, person_name, org_name, product_name, lead_name, url, name, description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
