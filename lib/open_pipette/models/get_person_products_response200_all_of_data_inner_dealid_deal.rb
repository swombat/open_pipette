=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class GetPersonProductsResponse200AllOfDataInnerDEALIDDeal
    # The ID of the deal
    attr_accessor :id

    # The ID of the company
    attr_accessor :company_id

    # The ID of the deal creator
    attr_accessor :creator_user_id

    # The ID of the user
    attr_accessor :user_id

    # The ID of the person associated with the deal
    attr_accessor :person_id

    # The ID of the organization associated with the deal
    attr_accessor :org_id

    # The ID of the deal stage
    attr_accessor :stage_id

    # The title of the deal
    attr_accessor :title

    # The value of the deal
    attr_accessor :value

    # The currency associated with the deal
    attr_accessor :currency

    # The creation date and time of the deal
    attr_accessor :add_time

    # The first creation date and time of the deal
    attr_accessor :first_add_time

    # The last updated date and time of the deal
    attr_accessor :update_time

    # The last updated date and time of the deal stage
    attr_accessor :stage_change_time

    # Whether the deal is active or not
    attr_accessor :active

    # Whether the deal is deleted or not
    attr_accessor :deleted

    # The status of the deal
    attr_accessor :status

    # The success probability percentage of the deal
    attr_accessor :probability

    # The date of the next activity associated with the deal
    attr_accessor :next_activity_date

    # The time of the next activity associated with the deal
    attr_accessor :next_activity_time

    # The ID of the next activity associated with the deal
    attr_accessor :next_activity_id

    # The ID of the last activity associated with the deal
    attr_accessor :last_activity_id

    # The date of the last activity associated with the deal
    attr_accessor :last_activity_date

    # The reason for losing the deal
    attr_accessor :lost_reason

    # The visibility of the deal
    attr_accessor :visible_to

    # The date and time of closing the deal
    attr_accessor :close_time

    # The ID of the pipeline associated with the deal
    attr_accessor :pipeline_id

    # The date and time of changing the deal status as won
    attr_accessor :won_time

    # The date and time of the first time changing the deal status as won
    attr_accessor :first_won_time

    # The date and time of changing the deal status as lost
    attr_accessor :lost_time

    # The number of products associated with the deal
    attr_accessor :products_count

    # The number of files associated with the deal
    attr_accessor :files_count

    # The number of notes associated with the deal
    attr_accessor :notes_count

    # The number of followers associated with the deal
    attr_accessor :followers_count

    # The number of emails associated with the deal
    attr_accessor :email_messages_count

    # The number of activities associated with the deal
    attr_accessor :activities_count

    # The number of completed activities associated with the deal
    attr_accessor :done_activities_count

    # The number of incomplete activities associated with the deal
    attr_accessor :undone_activities_count

    # The number of participants associated with the deal
    attr_accessor :participants_count

    # The expected close date of the deal
    attr_accessor :expected_close_date

    # The date and time of the last incoming email associated with the deal
    attr_accessor :last_incoming_mail_time

    # The date and time of the last outgoing email associated with the deal
    attr_accessor :last_outgoing_mail_time

    # The label or multiple labels assigned to the deal
    attr_accessor :label

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'company_id',
        :'creator_user_id' => :'creator_user_id',
        :'user_id' => :'user_id',
        :'person_id' => :'person_id',
        :'org_id' => :'org_id',
        :'stage_id' => :'stage_id',
        :'title' => :'title',
        :'value' => :'value',
        :'currency' => :'currency',
        :'add_time' => :'add_time',
        :'first_add_time' => :'first_add_time',
        :'update_time' => :'update_time',
        :'stage_change_time' => :'stage_change_time',
        :'active' => :'active',
        :'deleted' => :'deleted',
        :'status' => :'status',
        :'probability' => :'probability',
        :'next_activity_date' => :'next_activity_date',
        :'next_activity_time' => :'next_activity_time',
        :'next_activity_id' => :'next_activity_id',
        :'last_activity_id' => :'last_activity_id',
        :'last_activity_date' => :'last_activity_date',
        :'lost_reason' => :'lost_reason',
        :'visible_to' => :'visible_to',
        :'close_time' => :'close_time',
        :'pipeline_id' => :'pipeline_id',
        :'won_time' => :'won_time',
        :'first_won_time' => :'first_won_time',
        :'lost_time' => :'lost_time',
        :'products_count' => :'products_count',
        :'files_count' => :'files_count',
        :'notes_count' => :'notes_count',
        :'followers_count' => :'followers_count',
        :'email_messages_count' => :'email_messages_count',
        :'activities_count' => :'activities_count',
        :'done_activities_count' => :'done_activities_count',
        :'undone_activities_count' => :'undone_activities_count',
        :'participants_count' => :'participants_count',
        :'expected_close_date' => :'expected_close_date',
        :'last_incoming_mail_time' => :'last_incoming_mail_time',
        :'last_outgoing_mail_time' => :'last_outgoing_mail_time',
        :'label' => :'label'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'creator_user_id' => :'Integer',
        :'user_id' => :'Integer',
        :'person_id' => :'Integer',
        :'org_id' => :'Integer',
        :'stage_id' => :'Integer',
        :'title' => :'String',
        :'value' => :'Float',
        :'currency' => :'String',
        :'add_time' => :'String',
        :'first_add_time' => :'String',
        :'update_time' => :'String',
        :'stage_change_time' => :'String',
        :'active' => :'Boolean',
        :'deleted' => :'Boolean',
        :'status' => :'String',
        :'probability' => :'Float',
        :'next_activity_date' => :'String',
        :'next_activity_time' => :'String',
        :'next_activity_id' => :'Integer',
        :'last_activity_id' => :'Integer',
        :'last_activity_date' => :'String',
        :'lost_reason' => :'String',
        :'visible_to' => :'String',
        :'close_time' => :'String',
        :'pipeline_id' => :'Integer',
        :'won_time' => :'String',
        :'first_won_time' => :'String',
        :'lost_time' => :'String',
        :'products_count' => :'Integer',
        :'files_count' => :'Integer',
        :'notes_count' => :'Integer',
        :'followers_count' => :'Integer',
        :'email_messages_count' => :'Integer',
        :'activities_count' => :'Integer',
        :'done_activities_count' => :'Integer',
        :'undone_activities_count' => :'Integer',
        :'participants_count' => :'Integer',
        :'expected_close_date' => :'Date',
        :'last_incoming_mail_time' => :'String',
        :'last_outgoing_mail_time' => :'String',
        :'label' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'probability',
        :'next_activity_id',
        :'last_activity_id',
        :'last_activity_date',
        :'lost_reason',
        :'close_time',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetPersonProductsResponse200AllOfDataInnerDEALIDDeal` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetPersonProductsResponse200AllOfDataInnerDEALIDDeal`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'creator_user_id')
        self.creator_user_id = attributes[:'creator_user_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'person_id')
        self.person_id = attributes[:'person_id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'stage_id')
        self.stage_id = attributes[:'stage_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'first_add_time')
        self.first_add_time = attributes[:'first_add_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'stage_change_time')
        self.stage_change_time = attributes[:'stage_change_time']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'probability')
        self.probability = attributes[:'probability']
      end

      if attributes.key?(:'next_activity_date')
        self.next_activity_date = attributes[:'next_activity_date']
      end

      if attributes.key?(:'next_activity_time')
        self.next_activity_time = attributes[:'next_activity_time']
      end

      if attributes.key?(:'next_activity_id')
        self.next_activity_id = attributes[:'next_activity_id']
      end

      if attributes.key?(:'last_activity_id')
        self.last_activity_id = attributes[:'last_activity_id']
      end

      if attributes.key?(:'last_activity_date')
        self.last_activity_date = attributes[:'last_activity_date']
      end

      if attributes.key?(:'lost_reason')
        self.lost_reason = attributes[:'lost_reason']
      end

      if attributes.key?(:'visible_to')
        self.visible_to = attributes[:'visible_to']
      end

      if attributes.key?(:'close_time')
        self.close_time = attributes[:'close_time']
      end

      if attributes.key?(:'pipeline_id')
        self.pipeline_id = attributes[:'pipeline_id']
      end

      if attributes.key?(:'won_time')
        self.won_time = attributes[:'won_time']
      end

      if attributes.key?(:'first_won_time')
        self.first_won_time = attributes[:'first_won_time']
      end

      if attributes.key?(:'lost_time')
        self.lost_time = attributes[:'lost_time']
      end

      if attributes.key?(:'products_count')
        self.products_count = attributes[:'products_count']
      end

      if attributes.key?(:'files_count')
        self.files_count = attributes[:'files_count']
      end

      if attributes.key?(:'notes_count')
        self.notes_count = attributes[:'notes_count']
      end

      if attributes.key?(:'followers_count')
        self.followers_count = attributes[:'followers_count']
      end

      if attributes.key?(:'email_messages_count')
        self.email_messages_count = attributes[:'email_messages_count']
      end

      if attributes.key?(:'activities_count')
        self.activities_count = attributes[:'activities_count']
      end

      if attributes.key?(:'done_activities_count')
        self.done_activities_count = attributes[:'done_activities_count']
      end

      if attributes.key?(:'undone_activities_count')
        self.undone_activities_count = attributes[:'undone_activities_count']
      end

      if attributes.key?(:'participants_count')
        self.participants_count = attributes[:'participants_count']
      end

      if attributes.key?(:'expected_close_date')
        self.expected_close_date = attributes[:'expected_close_date']
      end

      if attributes.key?(:'last_incoming_mail_time')
        self.last_incoming_mail_time = attributes[:'last_incoming_mail_time']
      end

      if attributes.key?(:'last_outgoing_mail_time')
        self.last_outgoing_mail_time = attributes[:'last_outgoing_mail_time']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          creator_user_id == o.creator_user_id &&
          user_id == o.user_id &&
          person_id == o.person_id &&
          org_id == o.org_id &&
          stage_id == o.stage_id &&
          title == o.title &&
          value == o.value &&
          currency == o.currency &&
          add_time == o.add_time &&
          first_add_time == o.first_add_time &&
          update_time == o.update_time &&
          stage_change_time == o.stage_change_time &&
          active == o.active &&
          deleted == o.deleted &&
          status == o.status &&
          probability == o.probability &&
          next_activity_date == o.next_activity_date &&
          next_activity_time == o.next_activity_time &&
          next_activity_id == o.next_activity_id &&
          last_activity_id == o.last_activity_id &&
          last_activity_date == o.last_activity_date &&
          lost_reason == o.lost_reason &&
          visible_to == o.visible_to &&
          close_time == o.close_time &&
          pipeline_id == o.pipeline_id &&
          won_time == o.won_time &&
          first_won_time == o.first_won_time &&
          lost_time == o.lost_time &&
          products_count == o.products_count &&
          files_count == o.files_count &&
          notes_count == o.notes_count &&
          followers_count == o.followers_count &&
          email_messages_count == o.email_messages_count &&
          activities_count == o.activities_count &&
          done_activities_count == o.done_activities_count &&
          undone_activities_count == o.undone_activities_count &&
          participants_count == o.participants_count &&
          expected_close_date == o.expected_close_date &&
          last_incoming_mail_time == o.last_incoming_mail_time &&
          last_outgoing_mail_time == o.last_outgoing_mail_time &&
          label == o.label
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, creator_user_id, user_id, person_id, org_id, stage_id, title, value, currency, add_time, first_add_time, update_time, stage_change_time, active, deleted, status, probability, next_activity_date, next_activity_time, next_activity_id, last_activity_id, last_activity_date, lost_reason, visible_to, close_time, pipeline_id, won_time, first_won_time, lost_time, products_count, files_count, notes_count, followers_count, email_messages_count, activities_count, done_activities_count, undone_activities_count, participants_count, expected_close_date, last_incoming_mail_time, last_outgoing_mail_time, label].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
