=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenPipette
  class GetActivityTypesResponse200AllOfDataInner
    # The ID of the activity type
    attr_accessor :id

    # The name of the activity type
    attr_accessor :name

    # Icon graphic to use for representing this activity type
    attr_accessor :icon_key

    # A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
    attr_accessor :color

    # An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
    attr_accessor :order_nr

    # A string that is generated by the API based on the given name of the activity type upon creation
    attr_accessor :key_string

    # The active flag of the activity type
    attr_accessor :active_flag

    # Whether the activity type is a custom one or not
    attr_accessor :is_custom_flag

    # The creation time of the activity type
    attr_accessor :add_time

    # The update time of the activity type
    attr_accessor :update_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'icon_key' => :'icon_key',
        :'color' => :'color',
        :'order_nr' => :'order_nr',
        :'key_string' => :'key_string',
        :'active_flag' => :'active_flag',
        :'is_custom_flag' => :'is_custom_flag',
        :'add_time' => :'add_time',
        :'update_time' => :'update_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'icon_key' => :'String',
        :'color' => :'String',
        :'order_nr' => :'Integer',
        :'key_string' => :'String',
        :'active_flag' => :'Boolean',
        :'is_custom_flag' => :'Boolean',
        :'add_time' => :'Time',
        :'update_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenPipette::GetActivityTypesResponse200AllOfDataInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenPipette::GetActivityTypesResponse200AllOfDataInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'icon_key')
        self.icon_key = attributes[:'icon_key']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'order_nr')
        self.order_nr = attributes[:'order_nr']
      end

      if attributes.key?(:'key_string')
        self.key_string = attributes[:'key_string']
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'is_custom_flag')
        self.is_custom_flag = attributes[:'is_custom_flag']
      end

      if attributes.key?(:'add_time')
        self.add_time = attributes[:'add_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      icon_key_validator = EnumAttributeValidator.new('String', ["task", "email", "meeting", "deadline", "call", "lunch", "calendar", "downarrow", "document", "smartphone", "camera", "scissors", "cogs", "bubble", "uparrow", "checkbox", "signpost", "shuffle", "addressbook", "linegraph", "picture", "car", "world", "search", "clip", "sound", "brush", "key", "padlock", "pricetag", "suitcase", "finish", "plane", "loop", "wifi", "truck", "cart", "bulb", "bell", "presentation"])
      return false unless icon_key_validator.valid?(@icon_key)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] icon_key Object to be assigned
    def icon_key=(icon_key)
      validator = EnumAttributeValidator.new('String', ["task", "email", "meeting", "deadline", "call", "lunch", "calendar", "downarrow", "document", "smartphone", "camera", "scissors", "cogs", "bubble", "uparrow", "checkbox", "signpost", "shuffle", "addressbook", "linegraph", "picture", "car", "world", "search", "clip", "sound", "brush", "key", "padlock", "pricetag", "suitcase", "finish", "plane", "loop", "wifi", "truck", "cart", "bulb", "bell", "presentation"])
      unless validator.valid?(icon_key)
        fail ArgumentError, "invalid value for \"icon_key\", must be one of #{validator.allowable_values}."
      end
      @icon_key = icon_key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          icon_key == o.icon_key &&
          color == o.color &&
          order_nr == o.order_nr &&
          key_string == o.key_string &&
          active_flag == o.active_flag &&
          is_custom_flag == o.is_custom_flag &&
          add_time == o.add_time &&
          update_time == o.update_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, icon_key, color, order_nr, key_string, active_flag, is_custom_flag, add_time, update_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenPipette.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
