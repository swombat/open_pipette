=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a task
    # Adds a new task.
    # @param [Hash] opts the optional parameters
    # @option opts [AddTaskRequest] :add_task_request 
    # @return [AddTaskResponse201]
    def add_task(opts = {})
      data, _status_code, _headers = add_task_with_http_info(opts)
      data
    end

    # Add a task
    # Adds a new task.
    # @param [Hash] opts the optional parameters
    # @option opts [AddTaskRequest] :add_task_request 
    # @return [Array<(AddTaskResponse201, Integer, Hash)>] AddTaskResponse201 data, response status code and response headers
    def add_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.add_task ...'
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_task_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddTaskResponse201'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"TasksApi.add_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#add_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a task
    # Marks a task as deleted. If the task has subtasks then those will also be deleted.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @return [DeleteTaskResponse200]
    def delete_task(id, opts = {})
      data, _status_code, _headers = delete_task_with_http_info(id, opts)
      data
    end

    # Delete a task
    # Marks a task as deleted. If the task has subtasks then those will also be deleted.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteTaskResponse200, Integer, Hash)>] DeleteTaskResponse200 data, response status code and response headers
    def delete_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.delete_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.delete_task"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteTaskResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"TasksApi.delete_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#delete_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a task
    # Returns the details of a specific task.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @return [GetTaskResponse200]
    def get_task(id, opts = {})
      data, _status_code, _headers = get_task_with_http_info(id, opts)
      data
    end

    # Get details of a task
    # Returns the details of a specific task.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTaskResponse200, Integer, Hash)>] GetTaskResponse200 data, response status code and response headers
    def get_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.get_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.get_task"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTaskResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"TasksApi.get_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all tasks
    # Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
    # @option opts [Integer] :assignee_id If supplied, only tasks that are assigned to this user are returned
    # @option opts [Integer] :project_id If supplied, only tasks that are assigned to this project are returned
    # @option opts [Integer] :parent_task_id If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
    # @option opts [Float] :done Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.
    # @return [GetTasksResponse200]
    def get_tasks(opts = {})
      data, _status_code, _headers = get_tasks_with_http_info(opts)
      data
    end

    # Get all tasks
    # Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
    # @option opts [Integer] :assignee_id If supplied, only tasks that are assigned to this user are returned
    # @option opts [Integer] :project_id If supplied, only tasks that are assigned to this project are returned
    # @option opts [Integer] :parent_task_id If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
    # @option opts [Float] :done Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.
    # @return [Array<(GetTasksResponse200, Integer, Hash)>] GetTasksResponse200 data, response status code and response headers
    def get_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.get_tasks ...'
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'done'] && !allowable_values.include?(opts[:'done'])
        fail ArgumentError, "invalid value for \"done\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'assignee_id'] = opts[:'assignee_id'] if !opts[:'assignee_id'].nil?
      query_params[:'project_id'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'parent_task_id'] = opts[:'parent_task_id'] if !opts[:'parent_task_id'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTasksResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"TasksApi.get_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a task
    # Updates a task.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProjectRequest1] :update_project_request1 
    # @return [UpdateTaskResponse200]
    def update_task(id, opts = {})
      data, _status_code, _headers = update_task_with_http_info(id, opts)
      data
    end

    # Update a task
    # Updates a task.
    # @param id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProjectRequest1] :update_project_request1 
    # @return [Array<(UpdateTaskResponse200, Integer, Hash)>] UpdateTaskResponse200 data, response status code and response headers
    def update_task_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.update_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.update_task"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_project_request1'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTaskResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"TasksApi.update_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#update_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
