=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add or update role setting
    # Adds or updates the visibility setting for a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrUpdateRoleSettingRequest] :add_or_update_role_setting_request 
    # @return [AddOrUpdateRoleSettingResponse200]
    def add_or_update_role_setting(id, opts = {})
      data, _status_code, _headers = add_or_update_role_setting_with_http_info(id, opts)
      data
    end

    # Add or update role setting
    # Adds or updates the visibility setting for a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrUpdateRoleSettingRequest] :add_or_update_role_setting_request 
    # @return [Array<(AddOrUpdateRoleSettingResponse200, Integer, Hash)>] AddOrUpdateRoleSettingResponse200 data, response status code and response headers
    def add_or_update_role_setting_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.add_or_update_role_setting ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.add_or_update_role_setting"
      end
      # resource path
      local_var_path = '/roles/{id}/settings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_or_update_role_setting_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrUpdateRoleSettingResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.add_or_update_role_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#add_or_update_role_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a role
    # Adds a new role.
    # @param [Hash] opts the optional parameters
    # @option opts [AddRoleRequest] :add_role_request 
    # @return [AddRoleResponse200]
    def add_role(opts = {})
      data, _status_code, _headers = add_role_with_http_info(opts)
      data
    end

    # Add a role
    # Adds a new role.
    # @param [Hash] opts the optional parameters
    # @option opts [AddRoleRequest] :add_role_request 
    # @return [Array<(AddRoleResponse200, Integer, Hash)>] AddRoleResponse200 data, response status code and response headers
    def add_role_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.add_role ...'
      end
      # resource path
      local_var_path = '/roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_role_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddRoleResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.add_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#add_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add role assignment
    # Assigns a user to a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [AddRoleAssignmentRequest] :add_role_assignment_request 
    # @return [AddRoleAssignmentResponse200]
    def add_role_assignment(id, opts = {})
      data, _status_code, _headers = add_role_assignment_with_http_info(id, opts)
      data
    end

    # Add role assignment
    # Assigns a user to a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [AddRoleAssignmentRequest] :add_role_assignment_request 
    # @return [Array<(AddRoleAssignmentResponse200, Integer, Hash)>] AddRoleAssignmentResponse200 data, response status code and response headers
    def add_role_assignment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.add_role_assignment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.add_role_assignment"
      end
      # resource path
      local_var_path = '/roles/{id}/assignments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_role_assignment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddRoleAssignmentResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.add_role_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#add_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role
    # Marks a role as deleted.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [DeleteRoleResponse200]
    def delete_role(id, opts = {})
      data, _status_code, _headers = delete_role_with_http_info(id, opts)
      data
    end

    # Delete a role
    # Marks a role as deleted.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteRoleResponse200, Integer, Hash)>] DeleteRoleResponse200 data, response status code and response headers
    def delete_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.delete_role"
      end
      # resource path
      local_var_path = '/roles/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteRoleResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.delete_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role assignment
    # Removes the assigned user from a role and adds to the default role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteRoleAssignmentRequest] :delete_role_assignment_request 
    # @return [DeleteRoleAssignmentResponse200]
    def delete_role_assignment(id, opts = {})
      data, _status_code, _headers = delete_role_assignment_with_http_info(id, opts)
      data
    end

    # Delete a role assignment
    # Removes the assigned user from a role and adds to the default role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteRoleAssignmentRequest] :delete_role_assignment_request 
    # @return [Array<(DeleteRoleAssignmentResponse200, Integer, Hash)>] DeleteRoleAssignmentResponse200 data, response status code and response headers
    def delete_role_assignment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.delete_role_assignment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.delete_role_assignment"
      end
      # resource path
      local_var_path = '/roles/{id}/assignments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_role_assignment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteRoleAssignmentResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.delete_role_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one role
    # Returns the details of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [GetRoleResponse200]
    def get_role(id, opts = {})
      data, _status_code, _headers = get_role_with_http_info(id, opts)
      data
    end

    # Get one role
    # Returns the details of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRoleResponse200, Integer, Hash)>] GetRoleResponse200 data, response status code and response headers
    def get_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.get_role"
      end
      # resource path
      local_var_path = '/roles/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRoleResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List role assignments
    # Returns all users assigned to a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetUserRoleAssignmentsResponse200]
    def get_role_assignments(id, opts = {})
      data, _status_code, _headers = get_role_assignments_with_http_info(id, opts)
      data
    end

    # List role assignments
    # Returns all users assigned to a role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetUserRoleAssignmentsResponse200, Integer, Hash)>] GetUserRoleAssignmentsResponse200 data, response status code and response headers
    def get_role_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_assignments ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.get_role_assignments"
      end
      # resource path
      local_var_path = '/roles/{id}/assignments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserRoleAssignmentsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_role_assignments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pipeline visibility for a role
    # Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :visible Whether to return the visible or hidden pipelines for the role (default to true)
    # @return [GetRolePipelines200]
    def get_role_pipelines(id, opts = {})
      data, _status_code, _headers = get_role_pipelines_with_http_info(id, opts)
      data
    end

    # List pipeline visibility for a role
    # Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/visibility-groups\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Visibility groups article&lt;/a&gt;.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :visible Whether to return the visible or hidden pipelines for the role (default to true)
    # @return [Array<(GetRolePipelines200, Integer, Hash)>] GetRolePipelines200 data, response status code and response headers
    def get_role_pipelines_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_pipelines ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.get_role_pipelines"
      end
      # resource path
      local_var_path = '/roles/{id}/pipelines'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRolePipelines200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_role_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List role settings
    # Returns the visibility settings of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [GetRoleSettingsResponse200]
    def get_role_settings(id, opts = {})
      data, _status_code, _headers = get_role_settings_with_http_info(id, opts)
      data
    end

    # List role settings
    # Returns the visibility settings of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRoleSettingsResponse200, Integer, Hash)>] GetRoleSettingsResponse200 data, response status code and response headers
    def get_role_settings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_role_settings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.get_role_settings"
      end
      # resource path
      local_var_path = '/roles/{id}/settings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRoleSettingsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_role_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all roles
    # Returns all the roles within the company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetRolesResponse200]
    def get_roles(opts = {})
      data, _status_code, _headers = get_roles_with_http_info(opts)
      data
    end

    # Get all roles
    # Returns all the roles within the company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetRolesResponse200, Integer, Hash)>] GetRolesResponse200 data, response status code and response headers
    def get_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.get_roles ...'
      end
      # resource path
      local_var_path = '/roles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRolesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.get_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update role details
    # Updates the parent role and/or the name of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [BaseRoleRequest] :base_role_request 
    # @return [UpdateRoleResponse200]
    def update_role(id, opts = {})
      data, _status_code, _headers = update_role_with_http_info(id, opts)
      data
    end

    # Update role details
    # Updates the parent role and/or the name of a specific role.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [BaseRoleRequest] :base_role_request 
    # @return [Array<(UpdateRoleResponse200, Integer, Hash)>] UpdateRoleResponse200 data, response status code and response headers
    def update_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.update_role"
      end
      # resource path
      local_var_path = '/roles/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'base_role_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRoleResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.update_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pipeline visibility for a role
    # Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [PutRolePipelinesBody] :put_role_pipelines_body 
    # @return [GetRolePipelines200]
    def update_role_pipelines(id, opts = {})
      data, _status_code, _headers = update_role_pipelines_with_http_info(id, opts)
      data
    end

    # Update pipeline visibility for a role
    # Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/visibility-groups\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Visibility groups article&lt;/a&gt;.
    # @param id [Integer] The ID of the role
    # @param [Hash] opts the optional parameters
    # @option opts [PutRolePipelinesBody] :put_role_pipelines_body 
    # @return [Array<(GetRolePipelines200, Integer, Hash)>] GetRolePipelines200 data, response status code and response headers
    def update_role_pipelines_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_role_pipelines ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.update_role_pipelines"
      end
      # resource path
      local_var_path = '/roles/{id}/pipelines'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'put_role_pipelines_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetRolePipelines200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"RolesApi.update_role_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
