=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new user
    # Adds a new user to the company, returns the ID upon success.
    # @param [Hash] opts the optional parameters
    # @option opts [AddUserRequest] :add_user_request 
    # @return [UserResponse200]
    def add_user(opts = {})
      data, _status_code, _headers = add_user_with_http_info(opts)
      data
    end

    # Add a new user
    # Adds a new user to the company, returns the ID upon success.
    # @param [Hash] opts the optional parameters
    # @option opts [AddUserRequest] :add_user_request 
    # @return [Array<(UserResponse200, Integer, Hash)>] UserResponse200 data, response status code and response headers
    def add_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.add_user ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.add_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#add_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find users by name
    # Finds users by their name.
    # @param term [String] The search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :search_by_email When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;. (default to 0)
    # @return [UsersResponse200]
    def find_users_by_name(term, opts = {})
      data, _status_code, _headers = find_users_by_name_with_http_info(term, opts)
      data
    end

    # Find users by name
    # Finds users by their name.
    # @param term [String] The search term to look for
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :search_by_email When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;. (default to 0)
    # @return [Array<(UsersResponse200, Integer, Hash)>] UsersResponse200 data, response status code and response headers
    def find_users_by_name_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.find_users_by_name ...'
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling UsersApi.find_users_by_name"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'search_by_email'] && !allowable_values.include?(opts[:'search_by_email'])
        fail ArgumentError, "invalid value for \"search_by_email\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/find'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'term'] = term
      query_params[:'search_by_email'] = opts[:'search_by_email'] if !opts[:'search_by_email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.find_users_by_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#find_users_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current user data
    # Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means 'Date/number format' in the Pipedrive account settings, not the chosen language.
    # @param [Hash] opts the optional parameters
    # @return [GetCurrentUserResponse200]
    def get_current_user(opts = {})
      data, _status_code, _headers = get_current_user_with_http_info(opts)
      data
    end

    # Get current user data
    # Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the &#x60;locale&#x60; property means &#39;Date/number format&#39; in the Pipedrive account settings, not the chosen language.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCurrentUserResponse200, Integer, Hash)>] GetCurrentUserResponse200 data, response status code and response headers
    def get_current_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_current_user ...'
      end
      # resource path
      local_var_path = '/users/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCurrentUserResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_current_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one user
    # Returns data about a specific user within the company.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [UserResponse200]
    def get_user(id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(id, opts)
      data
    end

    # Get one user
    # Returns data about a specific user within the company.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponse200, Integer, Hash)>] UserResponse200 data, response status code and response headers
    def get_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a user
    # Lists the followers of a specific user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [UserIds]
    def get_user_followers(id, opts = {})
      data, _status_code, _headers = get_user_followers_with_http_info(id, opts)
      data
    end

    # List followers of a user
    # Lists the followers of a specific user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def get_user_followers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_followers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_followers"
      end
      # resource path
      local_var_path = '/users/{id}/followers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user permissions
    # Lists aggregated permissions over all assigned permission sets for a user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [GetUserPermissionsResponse200]
    def get_user_permissions(id, opts = {})
      data, _status_code, _headers = get_user_permissions_with_http_info(id, opts)
      data
    end

    # List user permissions
    # Lists aggregated permissions over all assigned permission sets for a user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserPermissionsResponse200, Integer, Hash)>] GetUserPermissionsResponse200 data, response status code and response headers
    def get_user_permissions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_permissions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_permissions"
      end
      # resource path
      local_var_path = '/users/{id}/permissions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserPermissionsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List role assignments
    # Lists role assignments for a user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetUserRoleAssignmentsResponse200]
    def get_user_role_assignments(id, opts = {})
      data, _status_code, _headers = get_user_role_assignments_with_http_info(id, opts)
      data
    end

    # List role assignments
    # Lists role assignments for a user.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetUserRoleAssignmentsResponse200, Integer, Hash)>] GetUserRoleAssignmentsResponse200 data, response status code and response headers
    def get_user_role_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_role_assignments ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_role_assignments"
      end
      # resource path
      local_var_path = '/users/{id}/roleAssignments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserRoleAssignmentsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_role_assignments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_role_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user role settings
    # Lists the settings of user's assigned role.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [GetRoleSettingsResponse200]
    def get_user_role_settings(id, opts = {})
      data, _status_code, _headers = get_user_role_settings_with_http_info(id, opts)
      data
    end

    # List user role settings
    # Lists the settings of user&#39;s assigned role.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRoleSettingsResponse200, Integer, Hash)>] GetRoleSettingsResponse200 data, response status code and response headers
    def get_user_role_settings_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_role_settings ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_role_settings"
      end
      # resource path
      local_var_path = '/users/{id}/roleSettings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRoleSettingsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_role_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_role_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all users
    # Returns data about all users within the company.
    # @param [Hash] opts the optional parameters
    # @return [UsersResponse200]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Get all users
    # Returns data about all users within the company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersResponse200, Integer, Hash)>] UsersResponse200 data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user details
    # Updates the properties of a user. Currently, only `active_flag` can be updated.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserRequest] :update_user_request 
    # @return [UserResponse200]
    def update_user(id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(id, opts)
      data
    end

    # Update user details
    # Updates the properties of a user. Currently, only &#x60;active_flag&#x60; can be updated.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserRequest] :update_user_request 
    # @return [Array<(UserResponse200, Integer, Hash)>] UserResponse200 data, response status code and response headers
    def update_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"UsersApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
