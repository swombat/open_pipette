=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class DealsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a deal
    # Adds a new deal. All deals created through the Pipedrive API will have a `origin` set to `API`. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealRequest] :add_deal_request 
    # @return [DealResponse200]
    def add_deal(opts = {})
      data, _status_code, _headers = add_deal_with_http_info(opts)
      data
    end

    # Add a deal
    # Adds a new deal. All deals created through the Pipedrive API will have a &#x60;origin&#x60; set to &#x60;API&#x60;. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for &#x60;key&#x60; values. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/creating-a-deal\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a deal&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealRequest] :add_deal_request 
    # @return [Array<(DealResponse200, Integer, Hash)>] DealResponse200 data, response status code and response headers
    def add_deal_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.add_deal ...'
      end
      # resource path
      local_var_path = '/deals'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_deal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DealResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.add_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#add_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a follower to a deal
    # Adds a follower to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealFollowerRequest] :add_deal_follower_request 
    # @return [AddDealFollowerResponse200]
    def add_deal_follower(id, opts = {})
      data, _status_code, _headers = add_deal_follower_with_http_info(id, opts)
      data
    end

    # Add a follower to a deal
    # Adds a follower to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealFollowerRequest] :add_deal_follower_request 
    # @return [Array<(AddDealFollowerResponse200, Integer, Hash)>] AddDealFollowerResponse200 data, response status code and response headers
    def add_deal_follower_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.add_deal_follower ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.add_deal_follower"
      end
      # resource path
      local_var_path = '/deals/{id}/followers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_deal_follower_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddDealFollowerResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.add_deal_follower",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#add_deal_follower\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a participant to a deal
    # Adds a participant to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealParticipantRequest] :add_deal_participant_request 
    # @return [AddDealParticipantResponse200]
    def add_deal_participant(id, opts = {})
      data, _status_code, _headers = add_deal_participant_with_http_info(id, opts)
      data
    end

    # Add a participant to a deal
    # Adds a participant to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealParticipantRequest] :add_deal_participant_request 
    # @return [Array<(AddDealParticipantResponse200, Integer, Hash)>] AddDealParticipantResponse200 data, response status code and response headers
    def add_deal_participant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.add_deal_participant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.add_deal_participant"
      end
      # resource path
      local_var_path = '/deals/{id}/participants'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_deal_participant_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddDealParticipantResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.add_deal_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#add_deal_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a product to a deal
    # Adds a product to a deal, creating a new item called a deal-product.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealProductRequest] :add_deal_product_request 
    # @return [GetAddProductAttachementResponse200]
    def add_deal_product(id, opts = {})
      data, _status_code, _headers = add_deal_product_with_http_info(id, opts)
      data
    end

    # Add a product to a deal
    # Adds a product to a deal, creating a new item called a deal-product.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [AddDealProductRequest] :add_deal_product_request 
    # @return [Array<(GetAddProductAttachementResponse200, Integer, Hash)>] GetAddProductAttachementResponse200 data, response status code and response headers
    def add_deal_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.add_deal_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.add_deal_product"
      end
      # resource path
      local_var_path = '/deals/{id}/products'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_deal_product_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAddProductAttachementResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.add_deal_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#add_deal_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a deal
    # Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [DeleteDealResponse200]
    def delete_deal(id, opts = {})
      data, _status_code, _headers = delete_deal_with_http_info(id, opts)
      data
    end

    # Delete a deal
    # Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDealResponse200, Integer, Hash)>] DeleteDealResponse200 data, response status code and response headers
    def delete_deal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.delete_deal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.delete_deal"
      end
      # resource path
      local_var_path = '/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDealResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.delete_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#delete_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a follower from a deal
    # Deletes a follower from a deal.
    # @param id [Integer] The ID of the deal
    # @param follower_id [Integer] The ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [DeleteDealFollowerResponse200]
    def delete_deal_follower(id, follower_id, opts = {})
      data, _status_code, _headers = delete_deal_follower_with_http_info(id, follower_id, opts)
      data
    end

    # Delete a follower from a deal
    # Deletes a follower from a deal.
    # @param id [Integer] The ID of the deal
    # @param follower_id [Integer] The ID of the follower
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDealFollowerResponse200, Integer, Hash)>] DeleteDealFollowerResponse200 data, response status code and response headers
    def delete_deal_follower_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.delete_deal_follower ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.delete_deal_follower"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling DealsApi.delete_deal_follower"
      end
      # resource path
      local_var_path = '/deals/{id}/followers/{follower_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'follower_id' + '}', CGI.escape(follower_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDealFollowerResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.delete_deal_follower",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#delete_deal_follower\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a participant from a deal
    # Deletes a participant from a deal.
    # @param id [Integer] The ID of the deal
    # @param deal_participant_id [Integer] The ID of the participant of the deal
    # @param [Hash] opts the optional parameters
    # @return [DeleteDealParticipantResponse200]
    def delete_deal_participant(id, deal_participant_id, opts = {})
      data, _status_code, _headers = delete_deal_participant_with_http_info(id, deal_participant_id, opts)
      data
    end

    # Delete a participant from a deal
    # Deletes a participant from a deal.
    # @param id [Integer] The ID of the deal
    # @param deal_participant_id [Integer] The ID of the participant of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDealParticipantResponse200, Integer, Hash)>] DeleteDealParticipantResponse200 data, response status code and response headers
    def delete_deal_participant_with_http_info(id, deal_participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.delete_deal_participant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.delete_deal_participant"
      end
      # verify the required parameter 'deal_participant_id' is set
      if @api_client.config.client_side_validation && deal_participant_id.nil?
        fail ArgumentError, "Missing the required parameter 'deal_participant_id' when calling DealsApi.delete_deal_participant"
      end
      # resource path
      local_var_path = '/deals/{id}/participants/{deal_participant_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'deal_participant_id' + '}', CGI.escape(deal_participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDealParticipantResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.delete_deal_participant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#delete_deal_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an attached product from a deal
    # Deletes a product attachment from a deal, using the `product_attachment_id`.
    # @param id [Integer] The ID of the deal
    # @param product_attachment_id [Integer] The product attachment ID
    # @param [Hash] opts the optional parameters
    # @return [DeleteDealProductResponse200]
    def delete_deal_product(id, product_attachment_id, opts = {})
      data, _status_code, _headers = delete_deal_product_with_http_info(id, product_attachment_id, opts)
      data
    end

    # Delete an attached product from a deal
    # Deletes a product attachment from a deal, using the &#x60;product_attachment_id&#x60;.
    # @param id [Integer] The ID of the deal
    # @param product_attachment_id [Integer] The product attachment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDealProductResponse200, Integer, Hash)>] DeleteDealProductResponse200 data, response status code and response headers
    def delete_deal_product_with_http_info(id, product_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.delete_deal_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.delete_deal_product"
      end
      # verify the required parameter 'product_attachment_id' is set
      if @api_client.config.client_side_validation && product_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_attachment_id' when calling DealsApi.delete_deal_product"
      end
      # resource path
      local_var_path = '/deals/{id}/products/{product_attachment_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'product_attachment_id' + '}', CGI.escape(product_attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDealProductResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.delete_deal_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#delete_deal_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple deals in bulk
    # Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
    # @param ids [String] The comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [DeleteDealsResponse200]
    def delete_deals(ids, opts = {})
      data, _status_code, _headers = delete_deals_with_http_info(ids, opts)
      data
    end

    # Delete multiple deals in bulk
    # Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
    # @param ids [String] The comma-separated IDs that will be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDealsResponse200, Integer, Hash)>] DeleteDealsResponse200 data, response status code and response headers
    def delete_deals_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.delete_deals ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling DealsApi.delete_deals"
      end
      # resource path
      local_var_path = '/deals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.delete_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#delete_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicate deal
    # Duplicates a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [DuplicateDealResponse200]
    def duplicate_deal(id, opts = {})
      data, _status_code, _headers = duplicate_deal_with_http_info(id, opts)
      data
    end

    # Duplicate deal
    # Duplicates a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(DuplicateDealResponse200, Integer, Hash)>] DuplicateDealResponse200 data, response status code and response headers
    def duplicate_deal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.duplicate_deal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.duplicate_deal"
      end
      # resource path
      local_var_path = '/deals/{id}/duplicate'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicateDealResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.duplicate_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#duplicate_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a deal
    # Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [GetDealResponse200]
    def get_deal(id, opts = {})
      data, _status_code, _headers = get_deal_with_http_info(id, opts)
      data
    end

    # Get details of a deal
    # Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#x60;key&#x60; value of dealFields. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/getting-details-of-a-deal\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;getting details of a deal&lt;/a&gt;.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDealResponse200, Integer, Hash)>] GetDealResponse200 data, response status code and response headers
    def get_deal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal"
      end
      # resource path
      local_var_path = '/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List activities associated with a deal
    # Lists activities associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
    # @return [GetDealActivitiesResponse200]
    def get_deal_activities(id, opts = {})
      data, _status_code, _headers = get_deal_activities_with_http_info(id, opts)
      data
    end

    # List activities associated with a deal
    # Lists activities associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
    # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
    # @return [Array<(GetDealActivitiesResponse200, Integer, Hash)>] GetDealActivitiesResponse200 data, response status code and response headers
    def get_deal_activities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_activities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_activities"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'done'] && !allowable_values.include?(opts[:'done'])
        fail ArgumentError, "invalid value for \"done\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/{id}/activities'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'done'] = opts[:'done'] if !opts[:'done'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealActivitiesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List updates about deal field values
    # Lists updates about field values of a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit Items shown per page
    # @return [GetChangelogResponse200]
    def get_deal_changelog(id, opts = {})
      data, _status_code, _headers = get_deal_changelog_with_http_info(id, opts)
      data
    end

    # List updates about deal field values
    # Lists updates about field values of a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetChangelogResponse200, Integer, Hash)>] GetChangelogResponse200 data, response status code and response headers
    def get_deal_changelog_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_changelog ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_changelog"
      end
      # resource path
      local_var_path = '/deals/{id}/changelog'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChangelogResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_changelog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_changelog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files attached to a deal
    # Lists files associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
    # @return [GetAssociatedFilesResponse200]
    def get_deal_files(id, opts = {})
      data, _status_code, _headers = get_deal_files_with_http_info(id, opts)
      data
    end

    # List files attached to a deal
    # Lists files associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
    # @return [Array<(GetAssociatedFilesResponse200, Integer, Hash)>] GetAssociatedFilesResponse200 data, response status code and response headers
    def get_deal_files_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_files ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_files"
      end
      # resource path
      local_var_path = '/deals/{id}/files'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssociatedFilesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a deal
    # Lists the followers of a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [GetAssociatedFollowersResponse200]
    def get_deal_followers(id, opts = {})
      data, _status_code, _headers = get_deal_followers_with_http_info(id, opts)
      data
    end

    # List followers of a deal
    # Lists the followers of a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAssociatedFollowersResponse200, Integer, Hash)>] GetAssociatedFollowersResponse200 data, response status code and response headers
    def get_deal_followers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_followers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_followers"
      end
      # resource path
      local_var_path = '/deals/{id}/followers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssociatedFollowersResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List mail messages associated with a deal
    # Lists mail messages associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetAssociatedMailMessagesResponse200]
    def get_deal_mail_messages(id, opts = {})
      data, _status_code, _headers = get_deal_mail_messages_with_http_info(id, opts)
      data
    end

    # List mail messages associated with a deal
    # Lists mail messages associated with a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetAssociatedMailMessagesResponse200, Integer, Hash)>] GetAssociatedMailMessagesResponse200 data, response status code and response headers
    def get_deal_mail_messages_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_mail_messages ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_mail_messages"
      end
      # resource path
      local_var_path = '/deals/{id}/mailMessages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssociatedMailMessagesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_mail_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_mail_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List participants of a deal
    # Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetDealParticipantsResponse200]
    def get_deal_participants(id, opts = {})
      data, _status_code, _headers = get_deal_participants_with_http_info(id, opts)
      data
    end

    # List participants of a deal
    # Lists the participants associated with a deal.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the &#x60;data.marketing_status&#x60; field.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetDealParticipantsResponse200, Integer, Hash)>] GetDealParticipantsResponse200 data, response status code and response headers
    def get_deal_participants_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_participants ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_participants"
      end
      # resource path
      local_var_path = '/deals/{id}/participants'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealParticipantsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_participants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List updates about participants of a deal
    # List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @return [GetParticipantsChangelog200]
    def get_deal_participants_changelog(id, opts = {})
      data, _status_code, _headers = get_deal_participants_changelog_with_http_info(id, opts)
      data
    end

    # List updates about participants of a deal
    # List updates about participants of a deal. This is a cursor-paginated endpoint. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @return [Array<(GetParticipantsChangelog200, Integer, Hash)>] GetParticipantsChangelog200 data, response status code and response headers
    def get_deal_participants_changelog_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_participants_changelog ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_participants_changelog"
      end
      # resource path
      local_var_path = '/deals/{id}/participantsChangelog'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetParticipantsChangelog200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_participants_changelog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_participants_changelog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all persons associated with a deal
    # Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [ListPersonsResponse200]
    def get_deal_persons(id, opts = {})
      data, _status_code, _headers = get_deal_persons_with_http_info(id, opts)
      data
    end

    # List all persons associated with a deal
    # Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the &#x60;data.marketing_status&#x60; field.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(ListPersonsResponse200, Integer, Hash)>] ListPersonsResponse200 data, response status code and response headers
    def get_deal_persons_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_persons ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_persons"
      end
      # resource path
      local_var_path = '/deals/{id}/persons'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPersonsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_persons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List products attached to a deal
    # Lists products attached to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :include_product_data Whether to fetch product data along with each attached product (1) or not (0, default)
    # @return [ListProductsResponse200]
    def get_deal_products(id, opts = {})
      data, _status_code, _headers = get_deal_products_with_http_info(id, opts)
      data
    end

    # List products attached to a deal
    # Lists products attached to a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :include_product_data Whether to fetch product data along with each attached product (1) or not (0, default)
    # @return [Array<(ListProductsResponse200, Integer, Hash)>] ListProductsResponse200 data, response status code and response headers
    def get_deal_products_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_products ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_products"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'include_product_data'] && !allowable_values.include?(opts[:'include_product_data'])
        fail ArgumentError, "invalid value for \"include_product_data\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/{id}/products'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include_product_data'] = opts[:'include_product_data'] if !opts[:'include_product_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListProductsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List updates about a deal
    # Lists updates about a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :all_changes Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
    # @option opts [String] :items A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
    # @return [GetDealUpdatesResponse200]
    def get_deal_updates(id, opts = {})
      data, _status_code, _headers = get_deal_updates_with_http_info(id, opts)
      data
    end

    # List updates about a deal
    # Lists updates about a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :all_changes Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
    # @option opts [String] :items A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
    # @return [Array<(GetDealUpdatesResponse200, Integer, Hash)>] GetDealUpdatesResponse200 data, response status code and response headers
    def get_deal_updates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_updates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_updates"
      end
      # resource path
      local_var_path = '/deals/{id}/flow'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'all_changes'] = opts[:'all_changes'] if !opts[:'all_changes'].nil?
      query_params[:'items'] = opts[:'items'] if !opts[:'items'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealUpdatesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_updates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # Lists the users permitted to access a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [ListPermittedUsersResponse200]
    def get_deal_users(id, opts = {})
      data, _status_code, _headers = get_deal_users_with_http_info(id, opts)
      data
    end

    # List permitted users
    # Lists the users permitted to access a deal.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListPermittedUsersResponse200, Integer, Hash)>] ListPermittedUsersResponse200 data, response status code and response headers
    def get_deal_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deal_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.get_deal_users"
      end
      # resource path
      local_var_path = '/deals/{id}/permittedUsers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPermittedUsersResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deal_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deal_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all deals
    # Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. (default to 'all_not_deleted')
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
    # @option opts [Float] :owned_by_you When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.
    # @return [GetDealsResponse200]
    def get_deals(opts = {})
      data, _status_code, _headers = get_deals_with_http_info(opts)
      data
    end

    # Get all deals
    # Returns all deals. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/getting-all-deals\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;getting all deals&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. (default to 'all_not_deleted')
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
    # @option opts [Float] :owned_by_you When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.
    # @return [Array<(GetDealsResponse200, Integer, Hash)>] GetDealsResponse200 data, response status code and response headers
    def get_deals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deals ...'
      end
      allowable_values = ["open", "won", "lost", "deleted", "all_not_deleted"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'owned_by_you'] && !allowable_values.include?(opts[:'owned_by_you'])
        fail ArgumentError, "invalid value for \"owned_by_you\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'stage_id'] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'owned_by_you'] = opts[:'owned_by_you'] if !opts[:'owned_by_you'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all deals (BETA)
    # Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
    # @option opts [String] :since The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
    # @option opts [String] :_until The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    # @return [GetDealsCollectionResponse200]
    def get_deals_collection(opts = {})
      data, _status_code, _headers = get_deals_collection_with_http_info(opts)
      data
    end

    # Get all deals (BETA)
    # Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/global-user-management\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
    # @option opts [String] :since The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
    # @option opts [String] :_until The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    # @return [Array<(GetDealsCollectionResponse200, Integer, Hash)>] GetDealsCollectionResponse200 data, response status code and response headers
    def get_deals_collection_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deals_collection ...'
      end
      allowable_values = ["open", "won", "lost", "deleted"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/collection'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'stage_id'] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealsCollectionResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deals_collection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deals_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals summary
    # Returns a summary of all the deals.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
    # @option opts [Integer] :filter_id &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
    # @option opts [Integer] :user_id Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
    # @option opts [Integer] :stage_id Only deals within the given stage will be returned
    # @return [GetDealsSummaryResponse200]
    def get_deals_summary(opts = {})
      data, _status_code, _headers = get_deals_summary_with_http_info(opts)
      data
    end

    # Get deals summary
    # Returns a summary of all the deals.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
    # @option opts [Integer] :filter_id &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
    # @option opts [Integer] :user_id Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
    # @option opts [Integer] :stage_id Only deals within the given stage will be returned
    # @return [Array<(GetDealsSummaryResponse200, Integer, Hash)>] GetDealsSummaryResponse200 data, response status code and response headers
    def get_deals_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deals_summary ...'
      end
      allowable_values = ["open", "won", "lost"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'stage_id'] = opts[:'stage_id'] if !opts[:'stage_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealsSummaryResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deals_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deals_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals timeline
    # Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
    # @param start_date [Date] The date when the first interval starts. Format: YYYY-MM-DD.
    # @param interval [String] The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    # @param amount [Integer] The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
    # @param field_key [String] The date field key which deals will be retrieved from
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned
    # @option opts [Integer] :pipeline_id If supplied, only deals matching the given pipeline will be returned
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Float] :exclude_deals Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user&#39;s default currency is used.
    # @return [GetDealsTimelineResponse200]
    def get_deals_timeline(start_date, interval, amount, field_key, opts = {})
      data, _status_code, _headers = get_deals_timeline_with_http_info(start_date, interval, amount, field_key, opts)
      data
    end

    # Get deals timeline
    # Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (&#x60;field_key&#x60;) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given &#x60;field_key&#x60;.
    # @param start_date [Date] The date when the first interval starts. Format: YYYY-MM-DD.
    # @param interval [String] The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
    # @param amount [Integer] The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
    # @param field_key [String] The date field key which deals will be retrieved from
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only deals matching the given user will be returned
    # @option opts [Integer] :pipeline_id If supplied, only deals matching the given pipeline will be returned
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Float] :exclude_deals Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user&#39;s default currency is used.
    # @return [Array<(GetDealsTimelineResponse200, Integer, Hash)>] GetDealsTimelineResponse200 data, response status code and response headers
    def get_deals_timeline_with_http_info(start_date, interval, amount, field_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.get_deals_timeline ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling DealsApi.get_deals_timeline"
      end
      # verify the required parameter 'interval' is set
      if @api_client.config.client_side_validation && interval.nil?
        fail ArgumentError, "Missing the required parameter 'interval' when calling DealsApi.get_deals_timeline"
      end
      # verify enum value
      allowable_values = ["day", "week", "month", "quarter"]
      if @api_client.config.client_side_validation && !allowable_values.include?(interval)
        fail ArgumentError, "invalid value for \"interval\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling DealsApi.get_deals_timeline"
      end
      # verify the required parameter 'field_key' is set
      if @api_client.config.client_side_validation && field_key.nil?
        fail ArgumentError, "Missing the required parameter 'field_key' when calling DealsApi.get_deals_timeline"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'exclude_deals'] && !allowable_values.include?(opts[:'exclude_deals'])
        fail ArgumentError, "invalid value for \"exclude_deals\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/timeline'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'interval'] = interval
      query_params[:'amount'] = amount
      query_params[:'field_key'] = field_key
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'pipeline_id'] = opts[:'pipeline_id'] if !opts[:'pipeline_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'exclude_deals'] = opts[:'exclude_deals'] if !opts[:'exclude_deals'].nil?
      query_params[:'totals_convert_currency'] = opts[:'totals_convert_currency'] if !opts[:'totals_convert_currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDealsTimelineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.get_deals_timeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#get_deals_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge two deals
    # Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [MergeDealsRequest] :merge_deals_request 
    # @return [MergeDealsResponse200]
    def merge_deals(id, opts = {})
      data, _status_code, _headers = merge_deals_with_http_info(id, opts)
      data
    end

    # Merge two deals
    # Merges a deal with another deal. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/merging-two-deals\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;merging two deals&lt;/a&gt;.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [MergeDealsRequest] :merge_deals_request 
    # @return [Array<(MergeDealsResponse200, Integer, Hash)>] MergeDealsResponse200 data, response status code and response headers
    def merge_deals_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.merge_deals ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.merge_deals"
      end
      # resource path
      local_var_path = '/deals/{id}/merge'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'merge_deals_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MergeDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.merge_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#merge_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search deals
    # Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [Integer] :person_id Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
    # @option opts [Integer] :organization_id Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
    # @option opts [String] :status Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [SearchDealsResponse200]
    def search_deals(term, opts = {})
      data, _status_code, _headers = search_deals_with_http_info(term, opts)
      data
    end

    # Search deals
    # Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of &lt;a href&#x3D;\&quot;https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\&quot;&gt;/v1/itemSearch&lt;/a&gt; with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [Integer] :person_id Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
    # @option opts [Integer] :organization_id Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
    # @option opts [String] :status Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(SearchDealsResponse200, Integer, Hash)>] SearchDealsResponse200 data, response status code and response headers
    def search_deals_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.search_deals ...'
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling DealsApi.search_deals"
      end
      allowable_values = ["custom_fields", "notes", "title"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !allowable_values.include?(opts[:'fields'])
        fail ArgumentError, "invalid value for \"fields\", must be one of #{allowable_values}"
      end
      allowable_values = ["open", "won", "lost"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["deal.cc_email"]
      if @api_client.config.client_side_validation && opts[:'include_fields'] && !allowable_values.include?(opts[:'include_fields'])
        fail ArgumentError, "invalid value for \"include_fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/deals/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'term'] = term
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exact_match'] = opts[:'exact_match'] if !opts[:'exact_match'].nil?
      query_params[:'person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'organization_id'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'include_fields'] = opts[:'include_fields'] if !opts[:'include_fields'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.search_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#search_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a deal
    # Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDealRequest] :update_deal_request 
    # @return [DealResponse200]
    def update_deal(id, opts = {})
      data, _status_code, _headers = update_deal_with_http_info(id, opts)
      data
    end

    # Update a deal
    # Updates the properties of a deal. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/updating-a-deal\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;updating a deal&lt;/a&gt;.
    # @param id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDealRequest] :update_deal_request 
    # @return [Array<(DealResponse200, Integer, Hash)>] DealResponse200 data, response status code and response headers
    def update_deal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.update_deal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.update_deal"
      end
      # resource path
      local_var_path = '/deals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_deal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DealResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.update_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#update_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the product attached to a deal
    # Updates the details of the product that has been attached to a deal.
    # @param id [Integer] The ID of the deal
    # @param product_attachment_id [Integer] The ID of the deal-product (the ID of the product attached to the deal)
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDealProductRequest] :update_deal_product_request 
    # @return [GetProductAttachementResponse200]
    def update_deal_product(id, product_attachment_id, opts = {})
      data, _status_code, _headers = update_deal_product_with_http_info(id, product_attachment_id, opts)
      data
    end

    # Update the product attached to a deal
    # Updates the details of the product that has been attached to a deal.
    # @param id [Integer] The ID of the deal
    # @param product_attachment_id [Integer] The ID of the deal-product (the ID of the product attached to the deal)
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDealProductRequest] :update_deal_product_request 
    # @return [Array<(GetProductAttachementResponse200, Integer, Hash)>] GetProductAttachementResponse200 data, response status code and response headers
    def update_deal_product_with_http_info(id, product_attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DealsApi.update_deal_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DealsApi.update_deal_product"
      end
      # verify the required parameter 'product_attachment_id' is set
      if @api_client.config.client_side_validation && product_attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_attachment_id' when calling DealsApi.update_deal_product"
      end
      # resource path
      local_var_path = '/deals/{id}/products/{product_attachment_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'product_attachment_id' + '}', CGI.escape(product_attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_deal_product_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetProductAttachementResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"DealsApi.update_deal_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DealsApi#update_deal_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
