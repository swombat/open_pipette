=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add file
    # Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
    # @param file [File] A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :deal_id The ID of the deal to associate file(s) with
    # @option opts [Integer] :person_id The ID of the person to associate file(s) with
    # @option opts [Integer] :org_id The ID of the organization to associate file(s) with
    # @option opts [Integer] :product_id The ID of the product to associate file(s) with
    # @option opts [Integer] :activity_id The ID of the activity to associate file(s) with
    # @option opts [String] :lead_id The ID of the lead to associate file(s) with
    # @return [AddFileResponse200]
    def add_file(file, opts = {})
      data, _status_code, _headers = add_file_with_http_info(file, opts)
      data
    end

    # Add file
    # Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-file\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a file&lt;/a&gt;.
    # @param file [File] A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :deal_id The ID of the deal to associate file(s) with
    # @option opts [Integer] :person_id The ID of the person to associate file(s) with
    # @option opts [Integer] :org_id The ID of the organization to associate file(s) with
    # @option opts [Integer] :product_id The ID of the product to associate file(s) with
    # @option opts [Integer] :activity_id The ID of the activity to associate file(s) with
    # @option opts [String] :lead_id The ID of the lead to associate file(s) with
    # @return [Array<(AddFileResponse200, Integer, Hash)>] AddFileResponse200 data, response status code and response headers
    def add_file_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.add_file ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.add_file"
      end
      # resource path
      local_var_path = '/files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['deal_id'] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      form_params['person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      form_params['org_id'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      form_params['product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      form_params['activity_id'] = opts[:'activity_id'] if !opts[:'activity_id'].nil?
      form_params['lead_id'] = opts[:'lead_id'] if !opts[:'lead_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddFileResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.add_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#add_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a remote file and link it to an item
    # Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
    # @param file_type [String] The file type
    # @param title [String] The title of the file
    # @param item_type [String] The item type
    # @param item_id [Integer] The ID of the item to associate the file with
    # @param remote_location [String] The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [AddFileAndLinkItResponse200]
    def add_file_and_link_it(file_type, title, item_type, item_id, remote_location, opts = {})
      data, _status_code, _headers = add_file_and_link_it_with_http_info(file_type, title, item_type, item_id, remote_location, opts)
      data
    end

    # Create a remote file and link it to an item
    # Creates a new empty file in the remote location (&#x60;googledrive&#x60;) that will be linked to the item you supply. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-remote-file\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a remote file&lt;/a&gt;.
    # @param file_type [String] The file type
    # @param title [String] The title of the file
    # @param item_type [String] The item type
    # @param item_id [Integer] The ID of the item to associate the file with
    # @param remote_location [String] The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddFileAndLinkItResponse200, Integer, Hash)>] AddFileAndLinkItResponse200 data, response status code and response headers
    def add_file_and_link_it_with_http_info(file_type, title, item_type, item_id, remote_location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.add_file_and_link_it ...'
      end
      # verify the required parameter 'file_type' is set
      if @api_client.config.client_side_validation && file_type.nil?
        fail ArgumentError, "Missing the required parameter 'file_type' when calling FilesApi.add_file_and_link_it"
      end
      # verify enum value
      allowable_values = ["gdoc", "gslides", "gsheet", "gform", "gdraw"]
      if @api_client.config.client_side_validation && !allowable_values.include?(file_type)
        fail ArgumentError, "invalid value for \"file_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling FilesApi.add_file_and_link_it"
      end
      # verify the required parameter 'item_type' is set
      if @api_client.config.client_side_validation && item_type.nil?
        fail ArgumentError, "Missing the required parameter 'item_type' when calling FilesApi.add_file_and_link_it"
      end
      # verify enum value
      allowable_values = ["deal", "organization", "person"]
      if @api_client.config.client_side_validation && !allowable_values.include?(item_type)
        fail ArgumentError, "invalid value for \"item_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling FilesApi.add_file_and_link_it"
      end
      # verify the required parameter 'remote_location' is set
      if @api_client.config.client_side_validation && remote_location.nil?
        fail ArgumentError, "Missing the required parameter 'remote_location' when calling FilesApi.add_file_and_link_it"
      end
      # verify enum value
      allowable_values = ["googledrive"]
      if @api_client.config.client_side_validation && !allowable_values.include?(remote_location)
        fail ArgumentError, "invalid value for \"remote_location\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/files/remote'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file_type'] = file_type
      form_params['title'] = title
      form_params['item_type'] = item_type
      form_params['item_id'] = item_id
      form_params['remote_location'] = remote_location

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddFileAndLinkItResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.add_file_and_link_it",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#add_file_and_link_it\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a file
    # Marks a file as deleted. After 30 days, the file will be permanently deleted.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [DeleteFileResponse200]
    def delete_file(id, opts = {})
      data, _status_code, _headers = delete_file_with_http_info(id, opts)
      data
    end

    # Delete a file
    # Marks a file as deleted. After 30 days, the file will be permanently deleted.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteFileResponse200, Integer, Hash)>] DeleteFileResponse200 data, response status code and response headers
    def delete_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.delete_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.delete_file"
      end
      # resource path
      local_var_path = '/files/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteFileResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.delete_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download one file
    # Initializes a file download.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_file(id, opts = {})
      data, _status_code, _headers = download_file_with_http_info(id, opts)
      data
    end

    # Download one file
    # Initializes a file download.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def download_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.download_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.download_file"
      end
      # resource path
      local_var_path = '/files/{id}/download'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.download_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one file
    # Returns data about a specific file.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [GetFileResponse200]
    def get_file(id, opts = {})
      data, _status_code, _headers = get_file_with_http_info(id, opts)
      data
    end

    # Get one file
    # Returns data about a specific file.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFileResponse200, Integer, Hash)>] GetFileResponse200 data, response status code and response headers
    def get_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.get_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.get_file"
      end
      # resource path
      local_var_path = '/files/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFileResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.get_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#get_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all files
    # Returns data about all files.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
    # @return [GetFilesResponse200]
    def get_files(opts = {})
      data, _status_code, _headers = get_files_with_http_info(opts)
      data
    end

    # Get all files
    # Returns data about all files.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
    # @return [Array<(GetFilesResponse200, Integer, Hash)>] GetFilesResponse200 data, response status code and response headers
    def get_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.get_files ...'
      end
      # resource path
      local_var_path = '/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFilesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.get_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#get_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link a remote file to an item
    # Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
    # @param item_type [String] The item type
    # @param item_id [Integer] The ID of the item to associate the file with
    # @param remote_id [String] The remote item ID
    # @param remote_location [String] The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [LinkFileToItemResponse200]
    def link_file_to_item(item_type, item_id, remote_id, remote_location, opts = {})
      data, _status_code, _headers = link_file_to_item_with_http_info(item_type, item_id, remote_id, remote_location, opts)
      data
    end

    # Link a remote file to an item
    # Links an existing remote file (&#x60;googledrive&#x60;) to the item you supply. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-remote-file\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a remote file&lt;/a&gt;.
    # @param item_type [String] The item type
    # @param item_id [Integer] The ID of the item to associate the file with
    # @param remote_id [String] The remote item ID
    # @param remote_location [String] The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkFileToItemResponse200, Integer, Hash)>] LinkFileToItemResponse200 data, response status code and response headers
    def link_file_to_item_with_http_info(item_type, item_id, remote_id, remote_location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.link_file_to_item ...'
      end
      # verify the required parameter 'item_type' is set
      if @api_client.config.client_side_validation && item_type.nil?
        fail ArgumentError, "Missing the required parameter 'item_type' when calling FilesApi.link_file_to_item"
      end
      # verify enum value
      allowable_values = ["deal", "organization", "person"]
      if @api_client.config.client_side_validation && !allowable_values.include?(item_type)
        fail ArgumentError, "invalid value for \"item_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling FilesApi.link_file_to_item"
      end
      # verify the required parameter 'remote_id' is set
      if @api_client.config.client_side_validation && remote_id.nil?
        fail ArgumentError, "Missing the required parameter 'remote_id' when calling FilesApi.link_file_to_item"
      end
      # verify the required parameter 'remote_location' is set
      if @api_client.config.client_side_validation && remote_location.nil?
        fail ArgumentError, "Missing the required parameter 'remote_location' when calling FilesApi.link_file_to_item"
      end
      # verify enum value
      allowable_values = ["googledrive"]
      if @api_client.config.client_side_validation && !allowable_values.include?(remote_location)
        fail ArgumentError, "invalid value for \"remote_location\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/files/remoteLink'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['item_type'] = item_type
      form_params['item_id'] = item_id
      form_params['remote_id'] = remote_id
      form_params['remote_location'] = remote_location

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkFileToItemResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.link_file_to_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#link_file_to_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update file details
    # Updates the properties of a file.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The visible name of the file
    # @option opts [String] :description The description of the file
    # @return [UpdateFileResponse200]
    def update_file(id, opts = {})
      data, _status_code, _headers = update_file_with_http_info(id, opts)
      data
    end

    # Update file details
    # Updates the properties of a file.
    # @param id [Integer] The ID of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The visible name of the file
    # @option opts [String] :description The description of the file
    # @return [Array<(UpdateFileResponse200, Integer, Hash)>] UpdateFileResponse200 data, response status code and response headers
    def update_file_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.update_file ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.update_file"
      end
      # resource path
      local_var_path = '/files/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateFileResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"FilesApi.update_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#update_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
