=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class PipelinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new pipeline
    # Adds a new pipeline.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineRequest] :pipeline_request 
    # @return [AddPipelineResponse200]
    def add_pipeline(opts = {})
      data, _status_code, _headers = add_pipeline_with_http_info(opts)
      data
    end

    # Add a new pipeline
    # Adds a new pipeline.
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineRequest] :pipeline_request 
    # @return [Array<(AddPipelineResponse200, Integer, Hash)>] AddPipelineResponse200 data, response status code and response headers
    def add_pipeline_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.add_pipeline ...'
      end
      # resource path
      local_var_path = '/pipelines'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pipeline_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddPipelineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.add_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#add_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a pipeline
    # Marks a pipeline as deleted.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [DeletePipelineResponse200]
    def delete_pipeline(id, opts = {})
      data, _status_code, _headers = delete_pipeline_with_http_info(id, opts)
      data
    end

    # Delete a pipeline
    # Marks a pipeline as deleted.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletePipelineResponse200, Integer, Hash)>] DeletePipelineResponse200 data, response status code and response headers
    def delete_pipeline_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_pipeline ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.delete_pipeline"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletePipelineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.delete_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one pipeline
    # Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.
    # @return [GetPipelineResponse200]
    def get_pipeline(id, opts = {})
      data, _status_code, _headers = get_pipeline_with_http_info(id, opts)
      data
    end

    # Get one pipeline
    # Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.
    # @return [Array<(GetPipelineResponse200, Integer, Hash)>] GetPipelineResponse200 data, response status code and response headers
    def get_pipeline_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.get_pipeline"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'totals_convert_currency'] = opts[:'totals_convert_currency'] if !opts[:'totals_convert_currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPipelineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals conversion rates in pipeline
    # Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
    # @param id [Integer] The ID of the pipeline
    # @param start_date [Date] The start of the period. Date in format of YYYY-MM-DD.
    # @param end_date [Date] The end of the period. Date in format of YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user who&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.
    # @return [GetPipelineConversionStatisticsResponse200]
    def get_pipeline_conversion_statistics(id, start_date, end_date, opts = {})
      data, _status_code, _headers = get_pipeline_conversion_statistics_with_http_info(id, start_date, end_date, opts)
      data
    end

    # Get deals conversion rates in pipeline
    # Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
    # @param id [Integer] The ID of the pipeline
    # @param start_date [Date] The start of the period. Date in format of YYYY-MM-DD.
    # @param end_date [Date] The end of the period. Date in format of YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user who&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.
    # @return [Array<(GetPipelineConversionStatisticsResponse200, Integer, Hash)>] GetPipelineConversionStatisticsResponse200 data, response status code and response headers
    def get_pipeline_conversion_statistics_with_http_info(id, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_conversion_statistics ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.get_pipeline_conversion_statistics"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling PipelinesApi.get_pipeline_conversion_statistics"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling PipelinesApi.get_pipeline_conversion_statistics"
      end
      # resource path
      local_var_path = '/pipelines/{id}/conversion_statistics'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPipelineConversionStatisticsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_conversion_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_conversion_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals in a pipeline
    # Lists deals in a specific pipeline across all its stages.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Integer] :user_id If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [Float] :everyone If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :get_summary Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.
    # @return [GetStageDealsResponse200]
    def get_pipeline_deals(id, opts = {})
      data, _status_code, _headers = get_pipeline_deals_with_http_info(id, opts)
      data
    end

    # Get deals in a pipeline
    # Lists deals in a specific pipeline across all its stages.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Integer] :user_id If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [Float] :everyone If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
    # @option opts [Integer] :stage_id If supplied, only deals within the given stage will be returned
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [Float] :get_summary Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
    # @option opts [String] :totals_convert_currency The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.
    # @return [Array<(GetStageDealsResponse200, Integer, Hash)>] GetStageDealsResponse200 data, response status code and response headers
    def get_pipeline_deals_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_deals ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.get_pipeline_deals"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'everyone'] && !allowable_values.include?(opts[:'everyone'])
        fail ArgumentError, "invalid value for \"everyone\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'get_summary'] && !allowable_values.include?(opts[:'get_summary'])
        fail ArgumentError, "invalid value for \"get_summary\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/pipelines/{id}/deals'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'everyone'] = opts[:'everyone'] if !opts[:'everyone'].nil?
      query_params[:'stage_id'] = opts[:'stage_id'] if !opts[:'stage_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'get_summary'] = opts[:'get_summary'] if !opts[:'get_summary'].nil?
      query_params[:'totals_convert_currency'] = opts[:'totals_convert_currency'] if !opts[:'totals_convert_currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStageDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals movements in pipeline
    # Returns statistics for deals movements for the given time period.
    # @param id [Integer] The ID of the pipeline
    # @param start_date [Date] The start of the period. Date in format of YYYY-MM-DD.
    # @param end_date [Date] The end of the period. Date in format of YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user who&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.
    # @return [GetPipelineMovementStatisticsResponse200]
    def get_pipeline_movement_statistics(id, start_date, end_date, opts = {})
      data, _status_code, _headers = get_pipeline_movement_statistics_with_http_info(id, start_date, end_date, opts)
      data
    end

    # Get deals movements in pipeline
    # Returns statistics for deals movements for the given time period.
    # @param id [Integer] The ID of the pipeline
    # @param start_date [Date] The start of the period. Date in format of YYYY-MM-DD.
    # @param end_date [Date] The end of the period. Date in format of YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id The ID of the user who&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.
    # @return [Array<(GetPipelineMovementStatisticsResponse200, Integer, Hash)>] GetPipelineMovementStatisticsResponse200 data, response status code and response headers
    def get_pipeline_movement_statistics_with_http_info(id, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline_movement_statistics ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.get_pipeline_movement_statistics"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling PipelinesApi.get_pipeline_movement_statistics"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling PipelinesApi.get_pipeline_movement_statistics"
      end
      # resource path
      local_var_path = '/pipelines/{id}/movement_statistics'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_date'] = start_date
      query_params[:'end_date'] = end_date
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPipelineMovementStatisticsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipeline_movement_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline_movement_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all pipelines
    # Returns data about all pipelines.
    # @param [Hash] opts the optional parameters
    # @return [GetPipelinesResponse200]
    def get_pipelines(opts = {})
      data, _status_code, _headers = get_pipelines_with_http_info(opts)
      data
    end

    # Get all pipelines
    # Returns data about all pipelines.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPipelinesResponse200, Integer, Hash)>] GetPipelinesResponse200 data, response status code and response headers
    def get_pipelines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipelines ...'
      end
      # resource path
      local_var_path = '/pipelines'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPipelinesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.get_pipelines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a pipeline
    # Updates the properties of a pipeline.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineRequest1] :pipeline_request1 
    # @return [UpdatePipelineResponse200]
    def update_pipeline(id, opts = {})
      data, _status_code, _headers = update_pipeline_with_http_info(id, opts)
      data
    end

    # Update a pipeline
    # Updates the properties of a pipeline.
    # @param id [Integer] The ID of the pipeline
    # @param [Hash] opts the optional parameters
    # @option opts [PipelineRequest1] :pipeline_request1 
    # @return [Array<(UpdatePipelineResponse200, Integer, Hash)>] UpdatePipelineResponse200 data, response status code and response headers
    def update_pipeline_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.update_pipeline ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelinesApi.update_pipeline"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'pipeline_request1'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePipelineResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"PipelinesApi.update_pipeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#update_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
