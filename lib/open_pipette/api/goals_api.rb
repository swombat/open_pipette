=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class GoalsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new goal
    # Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
    # @param [Hash] opts the optional parameters
    # @option opts [AddGoalRequest] :add_goal_request 
    # @return [AddOrUpdateGoalResponse200]
    def add_goal(opts = {})
      data, _status_code, _headers = add_goal_with_http_info(opts)
      data
    end

    # Add a new goal
    # Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
    # @param [Hash] opts the optional parameters
    # @option opts [AddGoalRequest] :add_goal_request 
    # @return [Array<(AddOrUpdateGoalResponse200, Integer, Hash)>] AddOrUpdateGoalResponse200 data, response status code and response headers
    def add_goal_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalsApi.add_goal ...'
      end
      # resource path
      local_var_path = '/goals'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_goal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrUpdateGoalResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"GoalsApi.add_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalsApi#add_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete existing goal
    # Marks a goal as deleted.
    # @param id [String] The ID of the goal
    # @param [Hash] opts the optional parameters
    # @return [DeleteGoalResponse200]
    def delete_goal(id, opts = {})
      data, _status_code, _headers = delete_goal_with_http_info(id, opts)
      data
    end

    # Delete existing goal
    # Marks a goal as deleted.
    # @param id [String] The ID of the goal
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteGoalResponse200, Integer, Hash)>] DeleteGoalResponse200 data, response status code and response headers
    def delete_goal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalsApi.delete_goal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GoalsApi.delete_goal"
      end
      # resource path
      local_var_path = '/goals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteGoalResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"GoalsApi.delete_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalsApi#delete_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get result of a goal
    # Gets the progress of a goal for the specified period.
    # @param id [String] The ID of the goal that the results are looked for
    # @param period_start [Date] The start date of the period for which to find the goal&#39;s progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date. 
    # @param period_end [Date] The end date of the period for which to find the goal&#39;s progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date. 
    # @param [Hash] opts the optional parameters
    # @return [GetGoalResultResponse200]
    def get_goal_result(id, period_start, period_end, opts = {})
      data, _status_code, _headers = get_goal_result_with_http_info(id, period_start, period_end, opts)
      data
    end

    # Get result of a goal
    # Gets the progress of a goal for the specified period.
    # @param id [String] The ID of the goal that the results are looked for
    # @param period_start [Date] The start date of the period for which to find the goal&#39;s progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date. 
    # @param period_end [Date] The end date of the period for which to find the goal&#39;s progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGoalResultResponse200, Integer, Hash)>] GetGoalResultResponse200 data, response status code and response headers
    def get_goal_result_with_http_info(id, period_start, period_end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalsApi.get_goal_result ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GoalsApi.get_goal_result"
      end
      # verify the required parameter 'period_start' is set
      if @api_client.config.client_side_validation && period_start.nil?
        fail ArgumentError, "Missing the required parameter 'period_start' when calling GoalsApi.get_goal_result"
      end
      # verify the required parameter 'period_end' is set
      if @api_client.config.client_side_validation && period_end.nil?
        fail ArgumentError, "Missing the required parameter 'period_end' when calling GoalsApi.get_goal_result"
      end
      # resource path
      local_var_path = '/goals/{id}/results'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'period.start'] = period_start
      query_params[:'period.end'] = period_end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGoalResultResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"GoalsApi.get_goal_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalsApi#get_goal_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find goals
    # Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_name The type of the goal. If provided, everyone&#39;s goals will be returned.
    # @option opts [String] :title The title of the goal
    # @option opts [Boolean] :is_active Whether the goal is active or not (default to true)
    # @option opts [Integer] :assignee_id The ID of the user who&#39;s goal to fetch. When omitted, only your goals will be returned.
    # @option opts [String] :assignee_type The type of the goal&#39;s assignee. If provided, everyone&#39;s goals will be returned.
    # @option opts [Float] :expected_outcome_target The numeric value of the outcome. If provided, everyone&#39;s goals will be returned.
    # @option opts [String] :expected_outcome_tracking_metric The tracking metric of the expected outcome of the goal. If provided, everyone&#39;s goals will be returned.
    # @option opts [Integer] :expected_outcome_currency_id The numeric ID of the goal&#39;s currency. Only applicable to goals with &#x60;expected_outcome.tracking_metric&#x60; with value &#x60;sum&#x60;. If provided, everyone&#39;s goals will be returned.
    # @option opts [Array<Integer>] :type_params_pipeline_id An array of pipeline IDs or &#x60;null&#x60; for all pipelines. If provided, everyone&#39;s goals will be returned.
    # @option opts [Integer] :type_params_stage_id The ID of the stage. Applicable to only &#x60;deals_progressed&#x60; type of goals. If provided, everyone&#39;s goals will be returned.
    # @option opts [Array<Integer>] :type_params_activity_type_id An array of IDs or &#x60;null&#x60; for all activity types. Only applicable for &#x60;activities_completed&#x60; and/or &#x60;activities_added&#x60; types of goals. If provided, everyone&#39;s goals will be returned.
    # @option opts [Date] :period_start The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When &#x60;period.start&#x60; is provided, &#x60;period.end&#x60; must be provided too.
    # @option opts [Date] :period_end The end date of the period for which to find goals. Date in format of YYYY-MM-DD.
    # @return [GetGoalsResponse200]
    def get_goals(opts = {})
      data, _status_code, _headers = get_goals_with_http_info(opts)
      data
    end

    # Find goals
    # Returns data about goals based on criteria. For searching, append &#x60;{searchField}&#x3D;{searchValue}&#x60; to the URL, where &#x60;searchField&#x60; can be any one of the lowest-level fields in dot-notation (e.g. &#x60;type.params.pipeline_id&#x60;; &#x60;title&#x60;). &#x60;searchValue&#x60; should be the value you are looking for on that field. Additionally, &#x60;is_active&#x3D;&lt;true|false&gt;&#x60; can be provided to search for only active/inactive goals. When providing &#x60;period.start&#x60;, &#x60;period.end&#x60; must also be provided and vice versa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_name The type of the goal. If provided, everyone&#39;s goals will be returned.
    # @option opts [String] :title The title of the goal
    # @option opts [Boolean] :is_active Whether the goal is active or not (default to true)
    # @option opts [Integer] :assignee_id The ID of the user who&#39;s goal to fetch. When omitted, only your goals will be returned.
    # @option opts [String] :assignee_type The type of the goal&#39;s assignee. If provided, everyone&#39;s goals will be returned.
    # @option opts [Float] :expected_outcome_target The numeric value of the outcome. If provided, everyone&#39;s goals will be returned.
    # @option opts [String] :expected_outcome_tracking_metric The tracking metric of the expected outcome of the goal. If provided, everyone&#39;s goals will be returned.
    # @option opts [Integer] :expected_outcome_currency_id The numeric ID of the goal&#39;s currency. Only applicable to goals with &#x60;expected_outcome.tracking_metric&#x60; with value &#x60;sum&#x60;. If provided, everyone&#39;s goals will be returned.
    # @option opts [Array<Integer>] :type_params_pipeline_id An array of pipeline IDs or &#x60;null&#x60; for all pipelines. If provided, everyone&#39;s goals will be returned.
    # @option opts [Integer] :type_params_stage_id The ID of the stage. Applicable to only &#x60;deals_progressed&#x60; type of goals. If provided, everyone&#39;s goals will be returned.
    # @option opts [Array<Integer>] :type_params_activity_type_id An array of IDs or &#x60;null&#x60; for all activity types. Only applicable for &#x60;activities_completed&#x60; and/or &#x60;activities_added&#x60; types of goals. If provided, everyone&#39;s goals will be returned.
    # @option opts [Date] :period_start The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When &#x60;period.start&#x60; is provided, &#x60;period.end&#x60; must be provided too.
    # @option opts [Date] :period_end The end date of the period for which to find goals. Date in format of YYYY-MM-DD.
    # @return [Array<(GetGoalsResponse200, Integer, Hash)>] GetGoalsResponse200 data, response status code and response headers
    def get_goals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalsApi.get_goals ...'
      end
      allowable_values = ["deals_won", "deals_progressed", "activities_completed", "activities_added", "deals_started"]
      if @api_client.config.client_side_validation && opts[:'type_name'] && !allowable_values.include?(opts[:'type_name'])
        fail ArgumentError, "invalid value for \"type_name\", must be one of #{allowable_values}"
      end
      allowable_values = ["person", "company", "team"]
      if @api_client.config.client_side_validation && opts[:'assignee_type'] && !allowable_values.include?(opts[:'assignee_type'])
        fail ArgumentError, "invalid value for \"assignee_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["quantity", "sum"]
      if @api_client.config.client_side_validation && opts[:'expected_outcome_tracking_metric'] && !allowable_values.include?(opts[:'expected_outcome_tracking_metric'])
        fail ArgumentError, "invalid value for \"expected_outcome_tracking_metric\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/goals/find'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type.name'] = opts[:'type_name'] if !opts[:'type_name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'is_active'] = opts[:'is_active'] if !opts[:'is_active'].nil?
      query_params[:'assignee.id'] = opts[:'assignee_id'] if !opts[:'assignee_id'].nil?
      query_params[:'assignee.type'] = opts[:'assignee_type'] if !opts[:'assignee_type'].nil?
      query_params[:'expected_outcome.target'] = opts[:'expected_outcome_target'] if !opts[:'expected_outcome_target'].nil?
      query_params[:'expected_outcome.tracking_metric'] = opts[:'expected_outcome_tracking_metric'] if !opts[:'expected_outcome_tracking_metric'].nil?
      query_params[:'expected_outcome.currency_id'] = opts[:'expected_outcome_currency_id'] if !opts[:'expected_outcome_currency_id'].nil?
      query_params[:'type.params.pipeline_id'] = @api_client.build_collection_param(opts[:'type_params_pipeline_id'], :multi) if !opts[:'type_params_pipeline_id'].nil?
      query_params[:'type.params.stage_id'] = opts[:'type_params_stage_id'] if !opts[:'type_params_stage_id'].nil?
      query_params[:'type.params.activity_type_id'] = @api_client.build_collection_param(opts[:'type_params_activity_type_id'], :multi) if !opts[:'type_params_activity_type_id'].nil?
      query_params[:'period.start'] = opts[:'period_start'] if !opts[:'period_start'].nil?
      query_params[:'period.end'] = opts[:'period_end'] if !opts[:'period_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGoalsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"GoalsApi.get_goals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalsApi#get_goals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update existing goal
    # Updates an existing goal.
    # @param id [String] The ID of the goal
    # @param [Hash] opts the optional parameters
    # @option opts [BasicGoalRequest] :basic_goal_request 
    # @return [AddOrUpdateGoalResponse200]
    def update_goal(id, opts = {})
      data, _status_code, _headers = update_goal_with_http_info(id, opts)
      data
    end

    # Update existing goal
    # Updates an existing goal.
    # @param id [String] The ID of the goal
    # @param [Hash] opts the optional parameters
    # @option opts [BasicGoalRequest] :basic_goal_request 
    # @return [Array<(AddOrUpdateGoalResponse200, Integer, Hash)>] AddOrUpdateGoalResponse200 data, response status code and response headers
    def update_goal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalsApi.update_goal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GoalsApi.update_goal"
      end
      # resource path
      local_var_path = '/goals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'basic_goal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrUpdateGoalResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"GoalsApi.update_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalsApi#update_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
