=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class MeetingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the link between a user and the installed video call integration
    # A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
    # @param id [String] Unique identifier linking a user to the installed integration
    # @param [Hash] opts the optional parameters
    # @return [UserProviderLinkSuccessResponse]
    def delete_user_provider_link(id, opts = {})
      data, _status_code, _headers = delete_user_provider_link_with_http_info(id, opts)
      data
    end

    # Delete the link between a user and the installed video call integration
    # A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
    # @param id [String] Unique identifier linking a user to the installed integration
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProviderLinkSuccessResponse, Integer, Hash)>] UserProviderLinkSuccessResponse data, response status code and response headers
    def delete_user_provider_link_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.delete_user_provider_link ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MeetingsApi.delete_user_provider_link"
      end
      # resource path
      local_var_path = '/meetings/userProviderLinks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProviderLinkSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MeetingsApi.delete_user_provider_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#delete_user_provider_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link a user with the installed video call integration
    # A video calling provider must call this endpoint after a user has installed the video calling app so that the new user's information is sent.
    # @param [Hash] opts the optional parameters
    # @option opts [AddUserProviderLinkRequest] :add_user_provider_link_request 
    # @return [UserProviderLinkSuccessResponse]
    def save_user_provider_link(opts = {})
      data, _status_code, _headers = save_user_provider_link_with_http_info(opts)
      data
    end

    # Link a user with the installed video call integration
    # A video calling provider must call this endpoint after a user has installed the video calling app so that the new user&#39;s information is sent.
    # @param [Hash] opts the optional parameters
    # @option opts [AddUserProviderLinkRequest] :add_user_provider_link_request 
    # @return [Array<(UserProviderLinkSuccessResponse, Integer, Hash)>] UserProviderLinkSuccessResponse data, response status code and response headers
    def save_user_provider_link_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.save_user_provider_link ...'
      end
      # resource path
      local_var_path = '/meetings/userProviderLinks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_user_provider_link_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserProviderLinkSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MeetingsApi.save_user_provider_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#save_user_provider_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
