=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class OrganizationRelationshipsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an organization relationship
    # Creates and returns an organization relationship.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationRelationshipRequest] :add_organization_relationship_request 
    # @return [AddOrganizationRelationshipResponse200]
    def add_organization_relationship(opts = {})
      data, _status_code, _headers = add_organization_relationship_with_http_info(opts)
      data
    end

    # Create an organization relationship
    # Creates and returns an organization relationship.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationRelationshipRequest] :add_organization_relationship_request 
    # @return [Array<(AddOrganizationRelationshipResponse200, Integer, Hash)>] AddOrganizationRelationshipResponse200 data, response status code and response headers
    def add_organization_relationship_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationRelationshipsApi.add_organization_relationship ...'
      end
      # resource path
      local_var_path = '/organizationRelationships'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_organization_relationship_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrganizationRelationshipResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"OrganizationRelationshipsApi.add_organization_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#add_organization_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization relationship
    # Deletes an organization relationship and returns the deleted ID.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @return [DeleteOrganizationRelationshipResponse200]
    def delete_organization_relationship(id, opts = {})
      data, _status_code, _headers = delete_organization_relationship_with_http_info(id, opts)
      data
    end

    # Delete an organization relationship
    # Deletes an organization relationship and returns the deleted ID.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteOrganizationRelationshipResponse200, Integer, Hash)>] DeleteOrganizationRelationshipResponse200 data, response status code and response headers
    def delete_organization_relationship_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationRelationshipsApi.delete_organization_relationship ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.delete_organization_relationship"
      end
      # resource path
      local_var_path = '/organizationRelationships/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteOrganizationRelationshipResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"OrganizationRelationshipsApi.delete_organization_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#delete_organization_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one organization relationship
    # Finds and returns an organization relationship from its ID.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :org_id The ID of the base organization for the returned calculated values
    # @return [GetOrganizationRelationshipResponse200]
    def get_organization_relationship(id, opts = {})
      data, _status_code, _headers = get_organization_relationship_with_http_info(id, opts)
      data
    end

    # Get one organization relationship
    # Finds and returns an organization relationship from its ID.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :org_id The ID of the base organization for the returned calculated values
    # @return [Array<(GetOrganizationRelationshipResponse200, Integer, Hash)>] GetOrganizationRelationshipResponse200 data, response status code and response headers
    def get_organization_relationship_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationRelationshipsApi.get_organization_relationship ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.get_organization_relationship"
      end
      # resource path
      local_var_path = '/organizationRelationships/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'org_id'] = opts[:'org_id'] if !opts[:'org_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationRelationshipResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"OrganizationRelationshipsApi.get_organization_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#get_organization_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all relationships for organization
    # Gets all of the relationships for a supplied organization ID.
    # @param org_id [Integer] The ID of the organization to get relationships for
    # @param [Hash] opts the optional parameters
    # @return [GetOrganizationRelationshipsResponse200]
    def get_organization_relationships(org_id, opts = {})
      data, _status_code, _headers = get_organization_relationships_with_http_info(org_id, opts)
      data
    end

    # Get all relationships for organization
    # Gets all of the relationships for a supplied organization ID.
    # @param org_id [Integer] The ID of the organization to get relationships for
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizationRelationshipsResponse200, Integer, Hash)>] GetOrganizationRelationshipsResponse200 data, response status code and response headers
    def get_organization_relationships_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationRelationshipsApi.get_organization_relationships ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationRelationshipsApi.get_organization_relationships"
      end
      # resource path
      local_var_path = '/organizationRelationships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'org_id'] = org_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationRelationshipsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"OrganizationRelationshipsApi.get_organization_relationships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#get_organization_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization relationship
    # Updates and returns an organization relationship.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationRelationship] :organization_relationship 
    # @return [UpdateOrganizationRelationshipResponse200]
    def update_organization_relationship(id, opts = {})
      data, _status_code, _headers = update_organization_relationship_with_http_info(id, opts)
      data
    end

    # Update an organization relationship
    # Updates and returns an organization relationship.
    # @param id [Integer] The ID of the organization relationship
    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationRelationship] :organization_relationship 
    # @return [Array<(UpdateOrganizationRelationshipResponse200, Integer, Hash)>] UpdateOrganizationRelationshipResponse200 data, response status code and response headers
    def update_organization_relationship_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationRelationshipsApi.update_organization_relationship ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrganizationRelationshipsApi.update_organization_relationship"
      end
      # resource path
      local_var_path = '/organizationRelationships/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'organization_relationship'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrganizationRelationshipResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"OrganizationRelationshipsApi.update_organization_relationship",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationRelationshipsApi#update_organization_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
