=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class ProjectTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get details of a template
    # Returns the details of a specific project template.
    # @param id [Integer] The ID of the project template
    # @param [Hash] opts the optional parameters
    # @return [GetProjectTemplateResponse200]
    def get_project_template(id, opts = {})
      data, _status_code, _headers = get_project_template_with_http_info(id, opts)
      data
    end

    # Get details of a template
    # Returns the details of a specific project template.
    # @param id [Integer] The ID of the project template
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectTemplateResponse200, Integer, Hash)>] GetProjectTemplateResponse200 data, response status code and response headers
    def get_project_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectTemplatesApi.get_project_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectTemplatesApi.get_project_template"
      end
      # resource path
      local_var_path = '/projectTemplates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectTemplateResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectTemplatesApi.get_project_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectTemplatesApi#get_project_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all project templates
    # Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
    # @return [GetProjectTemplatesResponse200]
    def get_project_templates(opts = {})
      data, _status_code, _headers = get_project_templates_with_http_info(opts)
      data
    end

    # Get all project templates
    # Returns all not deleted project templates. This is a cursor-paginated endpoint. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
    # @return [Array<(GetProjectTemplatesResponse200, Integer, Hash)>] GetProjectTemplatesResponse200 data, response status code and response headers
    def get_project_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectTemplatesApi.get_project_templates ...'
      end
      # resource path
      local_var_path = '/projectTemplates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectTemplatesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectTemplatesApi.get_project_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectTemplatesApi#get_project_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a board
    # Returns the details of a specific project board.
    # @param id [Integer] The ID of the project board
    # @param [Hash] opts the optional parameters
    # @return [GetProjectBoardResponse200]
    def get_projects_board(id, opts = {})
      data, _status_code, _headers = get_projects_board_with_http_info(id, opts)
      data
    end

    # Get details of a board
    # Returns the details of a specific project board.
    # @param id [Integer] The ID of the project board
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectBoardResponse200, Integer, Hash)>] GetProjectBoardResponse200 data, response status code and response headers
    def get_projects_board_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectTemplatesApi.get_projects_board ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectTemplatesApi.get_projects_board"
      end
      # resource path
      local_var_path = '/projects/boards/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectBoardResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectTemplatesApi.get_projects_board",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectTemplatesApi#get_projects_board\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a phase
    # Returns the details of a specific project phase.
    # @param id [Integer] The ID of the project phase
    # @param [Hash] opts the optional parameters
    # @return [GetProjectPhaseResponse200]
    def get_projects_phase(id, opts = {})
      data, _status_code, _headers = get_projects_phase_with_http_info(id, opts)
      data
    end

    # Get details of a phase
    # Returns the details of a specific project phase.
    # @param id [Integer] The ID of the project phase
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectPhaseResponse200, Integer, Hash)>] GetProjectPhaseResponse200 data, response status code and response headers
    def get_projects_phase_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectTemplatesApi.get_projects_phase ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectTemplatesApi.get_projects_phase"
      end
      # resource path
      local_var_path = '/projects/phases/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectPhaseResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectTemplatesApi.get_projects_phase",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectTemplatesApi#get_projects_phase\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
