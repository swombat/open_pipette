=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class MailboxApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete mail thread
    # Marks a mail thread as deleted.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [DeleteMailThreadResponse200]
    def delete_mail_thread(id, opts = {})
      data, _status_code, _headers = delete_mail_thread_with_http_info(id, opts)
      data
    end

    # Delete mail thread
    # Marks a mail thread as deleted.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteMailThreadResponse200, Integer, Hash)>] DeleteMailThreadResponse200 data, response status code and response headers
    def delete_mail_thread_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.delete_mail_thread ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MailboxApi.delete_mail_thread"
      end
      # resource path
      local_var_path = '/mailbox/mailThreads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteMailThreadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.delete_mail_thread",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#delete_mail_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one mail message
    # Returns data about a specific mail message.
    # @param id [Integer] The ID of the mail message to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :include_body Whether to include the full message body or not. &#x60;0&#x60; &#x3D; Don&#39;t include, &#x60;1&#x60; &#x3D; Include. (default to 0)
    # @return [MailMessageResponse200]
    def get_mail_message(id, opts = {})
      data, _status_code, _headers = get_mail_message_with_http_info(id, opts)
      data
    end

    # Get one mail message
    # Returns data about a specific mail message.
    # @param id [Integer] The ID of the mail message to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :include_body Whether to include the full message body or not. &#x60;0&#x60; &#x3D; Don&#39;t include, &#x60;1&#x60; &#x3D; Include. (default to 0)
    # @return [Array<(MailMessageResponse200, Integer, Hash)>] MailMessageResponse200 data, response status code and response headers
    def get_mail_message_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.get_mail_message ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MailboxApi.get_mail_message"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'include_body'] && !allowable_values.include?(opts[:'include_body'])
        fail ArgumentError, "invalid value for \"include_body\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mailbox/mailMessages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_body'] = opts[:'include_body'] if !opts[:'include_body'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MailMessageResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.get_mail_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#get_mail_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one mail thread
    # Returns a specific mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [GetOneMailThreadResponse200]
    def get_mail_thread(id, opts = {})
      data, _status_code, _headers = get_mail_thread_with_http_info(id, opts)
      data
    end

    # Get one mail thread
    # Returns a specific mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOneMailThreadResponse200, Integer, Hash)>] GetOneMailThreadResponse200 data, response status code and response headers
    def get_mail_thread_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.get_mail_thread ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MailboxApi.get_mail_thread"
      end
      # resource path
      local_var_path = '/mailbox/mailThreads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOneMailThreadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.get_mail_thread",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#get_mail_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all mail messages of mail thread
    # Returns all the mail messages inside a specified mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [GetAllMailMessagesOfMailThreadResponse200]
    def get_mail_thread_messages(id, opts = {})
      data, _status_code, _headers = get_mail_thread_messages_with_http_info(id, opts)
      data
    end

    # Get all mail messages of mail thread
    # Returns all the mail messages inside a specified mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAllMailMessagesOfMailThreadResponse200, Integer, Hash)>] GetAllMailMessagesOfMailThreadResponse200 data, response status code and response headers
    def get_mail_thread_messages_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.get_mail_thread_messages ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MailboxApi.get_mail_thread_messages"
      end
      # resource path
      local_var_path = '/mailbox/mailThreads/{id}/mailMessages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAllMailMessagesOfMailThreadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.get_mail_thread_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#get_mail_thread_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mail threads
    # Returns mail threads in a specified folder ordered by the most recent message within.
    # @param folder [String] The type of folder to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetMailThreadsResponse200]
    def get_mail_threads(folder, opts = {})
      data, _status_code, _headers = get_mail_threads_with_http_info(folder, opts)
      data
    end

    # Get mail threads
    # Returns mail threads in a specified folder ordered by the most recent message within.
    # @param folder [String] The type of folder to fetch
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetMailThreadsResponse200, Integer, Hash)>] GetMailThreadsResponse200 data, response status code and response headers
    def get_mail_threads_with_http_info(folder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.get_mail_threads ...'
      end
      # verify the required parameter 'folder' is set
      if @api_client.config.client_side_validation && folder.nil?
        fail ArgumentError, "Missing the required parameter 'folder' when calling MailboxApi.get_mail_threads"
      end
      # verify enum value
      allowable_values = ["inbox", "drafts", "sent", "archive"]
      if @api_client.config.client_side_validation && !allowable_values.include?(folder)
        fail ArgumentError, "invalid value for \"folder\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mailbox/mailThreads'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'folder'] = folder
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMailThreadsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.get_mail_threads",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#get_mail_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update mail thread details
    # Updates the properties of a mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :deal_id The ID of the deal this thread is associated with
    # @option opts [String] :lead_id The ID of the lead this thread is associated with
    # @option opts [Float] :shared_flag 
    # @option opts [Float] :read_flag 
    # @option opts [Float] :archived_flag 
    # @return [UpdateMailThreadDetailsResponse200]
    def update_mail_thread_details(id, opts = {})
      data, _status_code, _headers = update_mail_thread_details_with_http_info(id, opts)
      data
    end

    # Update mail thread details
    # Updates the properties of a mail thread.
    # @param id [Integer] The ID of the mail thread
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :deal_id The ID of the deal this thread is associated with
    # @option opts [String] :lead_id The ID of the lead this thread is associated with
    # @option opts [Float] :shared_flag 
    # @option opts [Float] :read_flag 
    # @option opts [Float] :archived_flag 
    # @return [Array<(UpdateMailThreadDetailsResponse200, Integer, Hash)>] UpdateMailThreadDetailsResponse200 data, response status code and response headers
    def update_mail_thread_details_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MailboxApi.update_mail_thread_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MailboxApi.update_mail_thread_details"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'shared_flag'] && !allowable_values.include?(opts[:'shared_flag'])
        fail ArgumentError, "invalid value for \"shared_flag\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'read_flag'] && !allowable_values.include?(opts[:'read_flag'])
        fail ArgumentError, "invalid value for \"read_flag\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'archived_flag'] && !allowable_values.include?(opts[:'archived_flag'])
        fail ArgumentError, "invalid value for \"archived_flag\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mailbox/mailThreads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['deal_id'] = opts[:'deal_id'] if !opts[:'deal_id'].nil?
      form_params['lead_id'] = opts[:'lead_id'] if !opts[:'lead_id'].nil?
      form_params['shared_flag'] = opts[:'shared_flag'] if !opts[:'shared_flag'].nil?
      form_params['read_flag'] = opts[:'read_flag'] if !opts[:'read_flag'].nil?
      form_params['archived_flag'] = opts[:'archived_flag'] if !opts[:'archived_flag'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateMailThreadDetailsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"MailboxApi.update_mail_thread_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MailboxApi#update_mail_thread_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
