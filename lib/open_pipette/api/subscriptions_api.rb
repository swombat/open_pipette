=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a recurring subscription
    # Adds a new recurring subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [AddRecurringSubscriptionRequest] :add_recurring_subscription_request 
    # @return [SubscriptionsIdResponse200]
    def add_recurring_subscription(opts = {})
      data, _status_code, _headers = add_recurring_subscription_with_http_info(opts)
      data
    end

    # Add a recurring subscription
    # Adds a new recurring subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [AddRecurringSubscriptionRequest] :add_recurring_subscription_request 
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def add_recurring_subscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.add_recurring_subscription ...'
      end
      # resource path
      local_var_path = '/subscriptions/recurring'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_recurring_subscription_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.add_recurring_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#add_recurring_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an installment subscription
    # Adds a new installment subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [AddSubscriptionInstallmentRequest] :add_subscription_installment_request 
    # @return [SubscriptionsIdResponse200]
    def add_subscription_installment(opts = {})
      data, _status_code, _headers = add_subscription_installment_with_http_info(opts)
      data
    end

    # Add an installment subscription
    # Adds a new installment subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [AddSubscriptionInstallmentRequest] :add_subscription_installment_request 
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def add_subscription_installment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.add_subscription_installment ...'
      end
      # resource path
      local_var_path = '/subscriptions/installment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_subscription_installment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.add_subscription_installment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#add_subscription_installment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a recurring subscription
    # Cancels a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [CancelRecurringSubscriptionRequest] :cancel_recurring_subscription_request 
    # @return [SubscriptionsIdResponse200]
    def cancel_recurring_subscription(id, opts = {})
      data, _status_code, _headers = cancel_recurring_subscription_with_http_info(id, opts)
      data
    end

    # Cancel a recurring subscription
    # Cancels a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [CancelRecurringSubscriptionRequest] :cancel_recurring_subscription_request 
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def cancel_recurring_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.cancel_recurring_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.cancel_recurring_subscription"
      end
      # resource path
      local_var_path = '/subscriptions/recurring/{id}/cancel'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'cancel_recurring_subscription_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.cancel_recurring_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#cancel_recurring_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a subscription
    # Marks an installment or a recurring subscription as deleted.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionsIdResponse200]
    def delete_subscription(id, opts = {})
      data, _status_code, _headers = delete_subscription_with_http_info(id, opts)
      data
    end

    # Delete a subscription
    # Marks an installment or a recurring subscription as deleted.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def delete_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.delete_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.delete_subscription"
      end
      # resource path
      local_var_path = '/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.delete_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find subscription by deal
    # Returns details of an installment or a recurring subscription by the deal ID.
    # @param deal_id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionsIdResponse200]
    def find_subscription_by_deal(deal_id, opts = {})
      data, _status_code, _headers = find_subscription_by_deal_with_http_info(deal_id, opts)
      data
    end

    # Find subscription by deal
    # Returns details of an installment or a recurring subscription by the deal ID.
    # @param deal_id [Integer] The ID of the deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def find_subscription_by_deal_with_http_info(deal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.find_subscription_by_deal ...'
      end
      # verify the required parameter 'deal_id' is set
      if @api_client.config.client_side_validation && deal_id.nil?
        fail ArgumentError, "Missing the required parameter 'deal_id' when calling SubscriptionsApi.find_subscription_by_deal"
      end
      # resource path
      local_var_path = '/subscriptions/find/{dealId}'.sub('{' + 'dealId' + '}', CGI.escape(deal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.find_subscription_by_deal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#find_subscription_by_deal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a subscription
    # Returns details of an installment or a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionsIdResponse200]
    def get_subscription(id, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(id, opts)
      data
    end

    # Get details of a subscription
    # Returns details of an installment or a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def get_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.get_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.get_subscription"
      end
      # resource path
      local_var_path = '/subscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.get_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all payments of a subscription
    # Returns all payments of an installment or recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [PaymentResponse200]
    def get_subscription_payments(id, opts = {})
      data, _status_code, _headers = get_subscription_payments_with_http_info(id, opts)
      data
    end

    # Get all payments of a subscription
    # Returns all payments of an installment or recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentResponse200, Integer, Hash)>] PaymentResponse200 data, response status code and response headers
    def get_subscription_payments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.get_subscription_payments ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.get_subscription_payments"
      end
      # resource path
      local_var_path = '/subscriptions/{id}/payments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.get_subscription_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_subscription_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a recurring subscription
    # Updates a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRecurringSubscriptionRequest] :update_recurring_subscription_request 
    # @return [SubscriptionsIdResponse200]
    def update_recurring_subscription(id, opts = {})
      data, _status_code, _headers = update_recurring_subscription_with_http_info(id, opts)
      data
    end

    # Update a recurring subscription
    # Updates a recurring subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRecurringSubscriptionRequest] :update_recurring_subscription_request 
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def update_recurring_subscription_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.update_recurring_subscription ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.update_recurring_subscription"
      end
      # resource path
      local_var_path = '/subscriptions/recurring/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_recurring_subscription_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.update_recurring_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#update_recurring_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an installment subscription
    # Updates an installment subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSubscriptionInstallmentRequest] :update_subscription_installment_request 
    # @return [SubscriptionsIdResponse200]
    def update_subscription_installment(id, opts = {})
      data, _status_code, _headers = update_subscription_installment_with_http_info(id, opts)
      data
    end

    # Update an installment subscription
    # Updates an installment subscription.
    # @param id [Integer] The ID of the subscription
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSubscriptionInstallmentRequest] :update_subscription_installment_request 
    # @return [Array<(SubscriptionsIdResponse200, Integer, Hash)>] SubscriptionsIdResponse200 data, response status code and response headers
    def update_subscription_installment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.update_subscription_installment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SubscriptionsApi.update_subscription_installment"
      end
      # resource path
      local_var_path = '/subscriptions/installment/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_subscription_installment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriptionsIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"SubscriptionsApi.update_subscription_installment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#update_subscription_installment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
