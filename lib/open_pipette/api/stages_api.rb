=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class StagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new stage
    # Adds a new stage, returns the ID upon success.
    # @param [Hash] opts the optional parameters
    # @option opts [AddStageRequest] :add_stage_request 
    # @return [StageResponse200]
    def add_stage(opts = {})
      data, _status_code, _headers = add_stage_with_http_info(opts)
      data
    end

    # Add a new stage
    # Adds a new stage, returns the ID upon success.
    # @param [Hash] opts the optional parameters
    # @option opts [AddStageRequest] :add_stage_request 
    # @return [Array<(StageResponse200, Integer, Hash)>] StageResponse200 data, response status code and response headers
    def add_stage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.add_stage ...'
      end
      # resource path
      local_var_path = '/stages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_stage_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'StageResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.add_stage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#add_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a stage
    # Marks a stage as deleted.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @return [DeleteStageResponse200]
    def delete_stage(id, opts = {})
      data, _status_code, _headers = delete_stage_with_http_info(id, opts)
      data
    end

    # Delete a stage
    # Marks a stage as deleted.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteStageResponse200, Integer, Hash)>] DeleteStageResponse200 data, response status code and response headers
    def delete_stage_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.delete_stage ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.delete_stage"
      end
      # resource path
      local_var_path = '/stages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteStageResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.delete_stage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#delete_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple stages in bulk
    # Marks multiple stages as deleted.
    # @param ids [String] The comma-separated stage IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteStagesResponse200]
    def delete_stages(ids, opts = {})
      data, _status_code, _headers = delete_stages_with_http_info(ids, opts)
      data
    end

    # Delete multiple stages in bulk
    # Marks multiple stages as deleted.
    # @param ids [String] The comma-separated stage IDs to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteStagesResponse200, Integer, Hash)>] DeleteStagesResponse200 data, response status code and response headers
    def delete_stages_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.delete_stages ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling StagesApi.delete_stages"
      end
      # resource path
      local_var_path = '/stages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteStagesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.delete_stages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#delete_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one stage
    # Returns data about a specific stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :everyone If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user
    # @return [GetStageResponse200]
    def get_stage(id, opts = {})
      data, _status_code, _headers = get_stage_with_http_info(id, opts)
      data
    end

    # Get one stage
    # Returns data about a specific stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :everyone If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user
    # @return [Array<(GetStageResponse200, Integer, Hash)>] GetStageResponse200 data, response status code and response headers
    def get_stage_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.get_stage ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.get_stage"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'everyone'] && !allowable_values.include?(opts[:'everyone'])
        fail ArgumentError, "invalid value for \"everyone\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/stages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'everyone'] = opts[:'everyone'] if !opts[:'everyone'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStageResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.get_stage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#get_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals in a stage
    # Lists deals in a specific stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Integer] :user_id If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [Float] :everyone If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetStageDealsResponse200]
    def get_stage_deals(id, opts = {})
      data, _status_code, _headers = get_stage_deals_with_http_info(id, opts)
      data
    end

    # Get deals in a stage
    # Lists deals in a specific stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :filter_id If supplied, only deals matching the given filter will be returned
    # @option opts [Integer] :user_id If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    # @option opts [Float] :everyone If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered – instead, deals owned by everyone will be returned
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetStageDealsResponse200, Integer, Hash)>] GetStageDealsResponse200 data, response status code and response headers
    def get_stage_deals_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.get_stage_deals ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.get_stage_deals"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'everyone'] && !allowable_values.include?(opts[:'everyone'])
        fail ArgumentError, "invalid value for \"everyone\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/stages/{id}/deals'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'everyone'] = opts[:'everyone'] if !opts[:'everyone'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStageDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.get_stage_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#get_stage_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all stages
    # Returns data about all stages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :pipeline_id The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetStagesResponse200]
    def get_stages(opts = {})
      data, _status_code, _headers = get_stages_with_http_info(opts)
      data
    end

    # Get all stages
    # Returns data about all stages.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :pipeline_id The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetStagesResponse200, Integer, Hash)>] GetStagesResponse200 data, response status code and response headers
    def get_stages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.get_stages ...'
      end
      # resource path
      local_var_path = '/stages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pipeline_id'] = opts[:'pipeline_id'] if !opts[:'pipeline_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStagesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.get_stages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#get_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update stage details
    # Updates the properties of a stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStageRequest] :update_stage_request 
    # @return [StageResponse200]
    def update_stage(id, opts = {})
      data, _status_code, _headers = update_stage_with_http_info(id, opts)
      data
    end

    # Update stage details
    # Updates the properties of a stage.
    # @param id [Integer] The ID of the stage
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStageRequest] :update_stage_request 
    # @return [Array<(StageResponse200, Integer, Hash)>] StageResponse200 data, response status code and response headers
    def update_stage_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StagesApi.update_stage ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StagesApi.update_stage"
      end
      # resource path
      local_var_path = '/stages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_stage_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'StageResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"StagesApi.update_stage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StagesApi#update_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
