=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class LegacyTeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a new team
    # Adds a new team to the company and returns the created object.
    # @param [Hash] opts the optional parameters
    # @option opts [AddTeamRequest] :add_team_request 
    # @return [TeamResponse200]
    def add_team(opts = {})
      data, _status_code, _headers = add_team_with_http_info(opts)
      data
    end

    # Add a new team
    # Adds a new team to the company and returns the created object.
    # @param [Hash] opts the optional parameters
    # @option opts [AddTeamRequest] :add_team_request 
    # @return [Array<(TeamResponse200, Integer, Hash)>] TeamResponse200 data, response status code and response headers
    def add_team_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.add_team ...'
      end
      # resource path
      local_var_path = '/legacyTeams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_team_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.add_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#add_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add users to a team
    # Adds users to an existing team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [AddTeamUserRequest] :add_team_user_request 
    # @return [UserIds]
    def add_team_user(id, opts = {})
      data, _status_code, _headers = add_team_user_with_http_info(id, opts)
      data
    end

    # Add users to a team
    # Adds users to an existing team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [AddTeamUserRequest] :add_team_user_request 
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def add_team_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.add_team_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.add_team_user"
      end
      # resource path
      local_var_path = '/legacyTeams/{id}/users'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_team_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.add_team_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#add_team_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete users from a team
    # Deletes users from an existing team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTeamUserRequest] :delete_team_user_request 
    # @return [UserIds]
    def delete_team_user(id, opts = {})
      data, _status_code, _headers = delete_team_user_with_http_info(id, opts)
      data
    end

    # Delete users from a team
    # Deletes users from an existing team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteTeamUserRequest] :delete_team_user_request 
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def delete_team_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.delete_team_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.delete_team_user"
      end
      # resource path
      local_var_path = '/legacyTeams/{id}/users'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_team_user_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.delete_team_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#delete_team_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single team
    # Returns data about a specific team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [TeamResponse200]
    def get_team(id, opts = {})
      data, _status_code, _headers = get_team_with_http_info(id, opts)
      data
    end

    # Get a single team
    # Returns data about a specific team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [Array<(TeamResponse200, Integer, Hash)>] TeamResponse200 data, response status code and response headers
    def get_team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.get_team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.get_team"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'skip_users'] && !allowable_values.include?(opts[:'skip_users'])
        fail ArgumentError, "invalid value for \"skip_users\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/legacyTeams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip_users'] = opts[:'skip_users'] if !opts[:'skip_users'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.get_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#get_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all users in a team
    # Returns a list of all user IDs within a team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @return [UserIds]
    def get_team_users(id, opts = {})
      data, _status_code, _headers = get_team_users_with_http_info(id, opts)
      data
    end

    # Get all users in a team
    # Returns a list of all user IDs within a team.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def get_team_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.get_team_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.get_team_users"
      end
      # resource path
      local_var_path = '/legacyTeams/{id}/users'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.get_team_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#get_team_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all teams
    # Returns data about teams within the company.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by The field name to sort returned teams by (default to 'id')
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [TeamsResponse200]
    def get_teams(opts = {})
      data, _status_code, _headers = get_teams_with_http_info(opts)
      data
    end

    # Get all teams
    # Returns data about teams within the company.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by The field name to sort returned teams by (default to 'id')
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [Array<(TeamsResponse200, Integer, Hash)>] TeamsResponse200 data, response status code and response headers
    def get_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.get_teams ...'
      end
      allowable_values = ["id", "name", "manager_id", "active_flag"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'skip_users'] && !allowable_values.include?(opts[:'skip_users'])
        fail ArgumentError, "invalid value for \"skip_users\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/legacyTeams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'skip_users'] = opts[:'skip_users'] if !opts[:'skip_users'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.get_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#get_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all teams of a user
    # Returns data about all teams which have the specified user as a member.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by The field name to sort returned teams by (default to 'id')
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [TeamsResponse200]
    def get_user_teams(id, opts = {})
      data, _status_code, _headers = get_user_teams_with_http_info(id, opts)
      data
    end

    # Get all teams of a user
    # Returns data about all teams which have the specified user as a member.
    # @param id [Integer] The ID of the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by The field name to sort returned teams by (default to 'id')
    # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users (default to 0)
    # @return [Array<(TeamsResponse200, Integer, Hash)>] TeamsResponse200 data, response status code and response headers
    def get_user_teams_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.get_user_teams ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.get_user_teams"
      end
      allowable_values = ["id", "name", "manager_id", "active_flag"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      allowable_values = [0, 1]
      if @api_client.config.client_side_validation && opts[:'skip_users'] && !allowable_values.include?(opts[:'skip_users'])
        fail ArgumentError, "invalid value for \"skip_users\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/legacyTeams/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'skip_users'] = opts[:'skip_users'] if !opts[:'skip_users'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.get_user_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#get_user_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a team
    # Updates an existing team and returns the updated object.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeamRequest] :update_team_request 
    # @return [TeamResponse200]
    def update_team(id, opts = {})
      data, _status_code, _headers = update_team_with_http_info(id, opts)
      data
    end

    # Update a team
    # Updates an existing team and returns the updated object.
    # @param id [Integer] The ID of the team
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeamRequest] :update_team_request 
    # @return [Array<(TeamResponse200, Integer, Hash)>] TeamResponse200 data, response status code and response headers
    def update_team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LegacyTeamsApi.update_team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LegacyTeamsApi.update_team"
      end
      # resource path
      local_var_path = '/legacyTeams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_team_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeamResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LegacyTeamsApi.update_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegacyTeamsApi#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
