=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a product
    # Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [AddProductRequest] :add_product_request 
    # @return [GetproductResponse200]
    def add_product(opts = {})
      data, _status_code, _headers = add_product_with_http_info(opts)
      data
    end

    # Add a product
    # Adds a new product to the Products inventory. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-product\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a product&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [AddProductRequest] :add_product_request 
    # @return [Array<(GetproductResponse200, Integer, Hash)>] GetproductResponse200 data, response status code and response headers
    def add_product_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.add_product ...'
      end
      # resource path
      local_var_path = '/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_product_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetproductResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.add_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#add_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a follower to a product
    # Adds a follower to a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [AddProductFollowerRequest] :add_product_follower_request 
    # @return [NewFollowerResponse200]
    def add_product_follower(id, opts = {})
      data, _status_code, _headers = add_product_follower_with_http_info(id, opts)
      data
    end

    # Add a follower to a product
    # Adds a follower to a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [AddProductFollowerRequest] :add_product_follower_request 
    # @return [Array<(NewFollowerResponse200, Integer, Hash)>] NewFollowerResponse200 data, response status code and response headers
    def add_product_follower_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.add_product_follower ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.add_product_follower"
      end
      # resource path
      local_var_path = '/products/{id}/followers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_product_follower_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'NewFollowerResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.add_product_follower",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#add_product_follower\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a product
    # Marks a product as deleted. After 30 days, the product will be permanently deleted.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [DeleteProductResponse200]
    def delete_product(id, opts = {})
      data, _status_code, _headers = delete_product_with_http_info(id, opts)
      data
    end

    # Delete a product
    # Marks a product as deleted. After 30 days, the product will be permanently deleted.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteProductResponse200, Integer, Hash)>] DeleteProductResponse200 data, response status code and response headers
    def delete_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.delete_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.delete_product"
      end
      # resource path
      local_var_path = '/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteProductResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.delete_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#delete_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a follower from a product
    # Deletes a follower from a product.
    # @param id [Integer] The ID of the product
    # @param follower_id [Integer] The ID of the relationship between the follower and the product
    # @param [Hash] opts the optional parameters
    # @return [DeleteProductFollowerResponse200]
    def delete_product_follower(id, follower_id, opts = {})
      data, _status_code, _headers = delete_product_follower_with_http_info(id, follower_id, opts)
      data
    end

    # Delete a follower from a product
    # Deletes a follower from a product.
    # @param id [Integer] The ID of the product
    # @param follower_id [Integer] The ID of the relationship between the follower and the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteProductFollowerResponse200, Integer, Hash)>] DeleteProductFollowerResponse200 data, response status code and response headers
    def delete_product_follower_with_http_info(id, follower_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.delete_product_follower ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.delete_product_follower"
      end
      # verify the required parameter 'follower_id' is set
      if @api_client.config.client_side_validation && follower_id.nil?
        fail ArgumentError, "Missing the required parameter 'follower_id' when calling ProductsApi.delete_product_follower"
      end
      # resource path
      local_var_path = '/products/{id}/followers/{follower_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'follower_id' + '}', CGI.escape(follower_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteProductFollowerResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.delete_product_follower",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#delete_product_follower\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one product
    # Returns data about a specific product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [GetproductResponse200]
    def get_product(id, opts = {})
      data, _status_code, _headers = get_product_with_http_info(id, opts)
      data
    end

    # Get one product
    # Returns data about a specific product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetproductResponse200, Integer, Hash)>] GetproductResponse200 data, response status code and response headers
    def get_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product"
      end
      # resource path
      local_var_path = '/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetproductResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get deals where a product is attached to
    # Returns data about deals that have a product attached to it.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. (default to 'all_not_deleted')
    # @return [GetAssociatedDealsResponse200]
    def get_product_deals(id, opts = {})
      data, _status_code, _headers = get_product_deals_with_http_info(id, opts)
      data
    end

    # Get deals where a product is attached to
    # Returns data about deals that have a product attached to it.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. (default to 'all_not_deleted')
    # @return [Array<(GetAssociatedDealsResponse200, Integer, Hash)>] GetAssociatedDealsResponse200 data, response status code and response headers
    def get_product_deals_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product_deals ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product_deals"
      end
      allowable_values = ["open", "won", "lost", "deleted", "all_not_deleted"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/products/{id}/deals'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssociatedDealsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_product_deals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product_deals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files attached to a product
    # Lists files associated with a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field name and sorting mode (&#x60;field_name_1 ASC&#x60; or &#x60;field_name_1 DESC&#x60;). Supported fields: &#x60;update_time&#x60;, &#x60;id&#x60;.
    # @return [GetAssociatedFilesResponse2001]
    def get_product_files(id, opts = {})
      data, _status_code, _headers = get_product_files_with_http_info(id, opts)
      data
    end

    # List files attached to a product
    # Lists files associated with a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @option opts [String] :sort The field name and sorting mode (&#x60;field_name_1 ASC&#x60; or &#x60;field_name_1 DESC&#x60;). Supported fields: &#x60;update_time&#x60;, &#x60;id&#x60;.
    # @return [Array<(GetAssociatedFilesResponse2001, Integer, Hash)>] GetAssociatedFilesResponse2001 data, response status code and response headers
    def get_product_files_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product_files ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product_files"
      end
      # resource path
      local_var_path = '/products/{id}/files'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssociatedFilesResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_product_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List followers of a product
    # Lists the followers of a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetProductFollowersResponseSuccess]
    def get_product_followers(id, opts = {})
      data, _status_code, _headers = get_product_followers_with_http_info(id, opts)
      data
    end

    # List followers of a product
    # Lists the followers of a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetProductFollowersResponseSuccess, Integer, Hash)>] GetProductFollowersResponseSuccess data, response status code and response headers
    def get_product_followers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product_followers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product_followers"
      end
      # resource path
      local_var_path = '/products/{id}/followers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProductFollowersResponseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_product_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # Lists users permitted to access a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [UserIds]
    def get_product_users(id, opts = {})
      data, _status_code, _headers = get_product_users_with_http_info(id, opts)
      data
    end

    # List permitted users
    # Lists users permitted to access a product.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def get_product_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_product_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.get_product_users"
      end
      # resource path
      local_var_path = '/products/{id}/permittedUsers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_product_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_product_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all products
    # Returns data about all products.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only products owned by the given user will be returned
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [Array<Integer>] :ids An array of integers with the IDs of the products that should be returned in the response
    # @option opts [String] :first_char If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
    # @option opts [Boolean] :get_summary If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [GetProductsResponse200]
    def get_products(opts = {})
      data, _status_code, _headers = get_products_with_http_info(opts)
      data
    end

    # Get all products
    # Returns data about all products.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id If supplied, only products owned by the given user will be returned
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [Array<Integer>] :ids An array of integers with the IDs of the products that should be returned in the response
    # @option opts [String] :first_char If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
    # @option opts [Boolean] :get_summary If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
    # @option opts [Integer] :start Pagination start (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(GetProductsResponse200, Integer, Hash)>] GetProductsResponse200 data, response status code and response headers
    def get_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.get_products ...'
      end
      # resource path
      local_var_path = '/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'first_char'] = opts[:'first_char'] if !opts[:'first_char'].nil?
      query_params[:'get_summary'] = opts[:'get_summary'] if !opts[:'get_summary'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProductsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.get_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search products
    # Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [SearchProductsResponse200]
    def search_products(term, opts = {})
      data, _status_code, _headers = search_products_with_http_info(term, opts)
      data
    end

    # Search products
    # Searches all products by name, code and/or custom fields. This endpoint is a wrapper of &lt;a href&#x3D;\&quot;https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\&quot;&gt;/v1/itemSearch&lt;/a&gt; with a narrower OAuth scope.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(SearchProductsResponse200, Integer, Hash)>] SearchProductsResponse200 data, response status code and response headers
    def search_products_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.search_products ...'
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling ProductsApi.search_products"
      end
      allowable_values = ["code", "custom_fields", "name"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !allowable_values.include?(opts[:'fields'])
        fail ArgumentError, "invalid value for \"fields\", must be one of #{allowable_values}"
      end
      allowable_values = ["product.price"]
      if @api_client.config.client_side_validation && opts[:'include_fields'] && !allowable_values.include?(opts[:'include_fields'])
        fail ArgumentError, "invalid value for \"include_fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/products/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'term'] = term
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exact_match'] = opts[:'exact_match'] if !opts[:'exact_match'].nil?
      query_params[:'include_fields'] = opts[:'include_fields'] if !opts[:'include_fields'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchProductsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.search_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#search_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a product
    # Updates product data.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProductRequest] :update_product_request 
    # @return [UpdateProductResponse200]
    def update_product(id, opts = {})
      data, _status_code, _headers = update_product_with_http_info(id, opts)
      data
    end

    # Update a product
    # Updates product data.
    # @param id [Integer] The ID of the product
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProductRequest] :update_product_request 
    # @return [Array<(UpdateProductResponse200, Integer, Hash)>] UpdateProductResponse200 data, response status code and response headers
    def update_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.update_product ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductsApi.update_product"
      end
      # resource path
      local_var_path = '/products/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_product_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateProductResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProductsApi.update_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#update_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
