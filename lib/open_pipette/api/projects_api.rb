=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a project
    # Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
    # @param [Hash] opts the optional parameters
    # @option opts [AddProjectRequest] :add_project_request 
    # @return [AddProjectResponse201]
    def add_project(opts = {})
      data, _status_code, _headers = add_project_with_http_info(opts)
      data
    end

    # Add a project
    # Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
    # @param [Hash] opts the optional parameters
    # @option opts [AddProjectRequest] :add_project_request 
    # @return [Array<(AddProjectResponse201, Integer, Hash)>] AddProjectResponse201 data, response status code and response headers
    def add_project_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.add_project ...'
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_project_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddProjectResponse201'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.add_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#add_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive a project
    # Archives a project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [UpdateProjectResponse200]
    def archive_project(id, opts = {})
      data, _status_code, _headers = archive_project_with_http_info(id, opts)
      data
    end

    # Archive a project
    # Archives a project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateProjectResponse200, Integer, Hash)>] UpdateProjectResponse200 data, response status code and response headers
    def archive_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.archive_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.archive_project"
      end
      # resource path
      local_var_path = '/projects/{id}/archive'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateProjectResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.archive_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#archive_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a project
    # Marks a project as deleted.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [DeleteProjectResponse200]
    def delete_project(id, opts = {})
      data, _status_code, _headers = delete_project_with_http_info(id, opts)
      data
    end

    # Delete a project
    # Marks a project as deleted.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteProjectResponse200, Integer, Hash)>] DeleteProjectResponse200 data, response status code and response headers
    def delete_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.delete_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteProjectResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.delete_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a project
    # Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetProjectResponse200]
    def get_project(id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(id, opts)
      data
    end

    # Get details of a project
    # Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#x60;key&#x60; value of project fields.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectResponse200, Integer, Hash)>] GetProjectResponse200 data, response status code and response headers
    def get_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.get_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns project activities
    # Returns activities linked to a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetActivitiesCollectionResponse200]
    def get_project_activities(id, opts = {})
      data, _status_code, _headers = get_project_activities_with_http_info(id, opts)
      data
    end

    # Returns project activities
    # Returns activities linked to a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetActivitiesCollectionResponse200, Integer, Hash)>] GetActivitiesCollectionResponse200 data, response status code and response headers
    def get_project_activities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_activities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.get_project_activities"
      end
      # resource path
      local_var_path = '/projects/{id}/activities'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetActivitiesCollectionResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_activities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns project groups
    # Returns all active groups under a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetProjectGroupsResponse200]
    def get_project_groups(id, opts = {})
      data, _status_code, _headers = get_project_groups_with_http_info(id, opts)
      data
    end

    # Returns project groups
    # Returns all active groups under a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectGroupsResponse200, Integer, Hash)>] GetProjectGroupsResponse200 data, response status code and response headers
    def get_project_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.get_project_groups"
      end
      # resource path
      local_var_path = '/projects/{id}/groups'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectGroupsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns project plan
    # Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetProjectPlanResponse200]
    def get_project_plan(id, opts = {})
      data, _status_code, _headers = get_project_plan_with_http_info(id, opts)
      data
    end

    # Returns project plan
    # Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectPlanResponse200, Integer, Hash)>] GetProjectPlanResponse200 data, response status code and response headers
    def get_project_plan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_plan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.get_project_plan"
      end
      # resource path
      local_var_path = '/projects/{id}/plan'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectPlanResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns project tasks
    # Returns tasks linked to a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetTasksResponse200]
    def get_project_tasks(id, opts = {})
      data, _status_code, _headers = get_project_tasks_with_http_info(id, opts)
      data
    end

    # Returns project tasks
    # Returns tasks linked to a specific project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTasksResponse200, Integer, Hash)>] GetTasksResponse200 data, response status code and response headers
    def get_project_tasks_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_tasks ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.get_project_tasks"
      end
      # resource path
      local_var_path = '/projects/{id}/tasks'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTasksResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_tasks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all projects
    # Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [String] :status If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
    # @option opts [Integer] :phase_id If supplied, only projects in specified phase are returned
    # @option opts [Boolean] :include_archived If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.
    # @return [GetProjectsResponse200]
    def get_projects(opts = {})
      data, _status_code, _headers = get_projects_with_http_info(opts)
      data
    end

    # Get all projects
    # Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [String] :status If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
    # @option opts [Integer] :phase_id If supplied, only projects in specified phase are returned
    # @option opts [Boolean] :include_archived If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.
    # @return [Array<(GetProjectsResponse200, Integer, Hash)>] GetProjectsResponse200 data, response status code and response headers
    def get_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_projects ...'
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'phase_id'] = opts[:'phase_id'] if !opts[:'phase_id'].nil?
      query_params[:'include_archived'] = opts[:'include_archived'] if !opts[:'include_archived'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_projects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all project boards
    # Returns all projects boards that are not deleted.
    # @param [Hash] opts the optional parameters
    # @return [GetProjectBoardsResponse200]
    def get_projects_boards(opts = {})
      data, _status_code, _headers = get_projects_boards_with_http_info(opts)
      data
    end

    # Get all project boards
    # Returns all projects boards that are not deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectBoardsResponse200, Integer, Hash)>] GetProjectBoardsResponse200 data, response status code and response headers
    def get_projects_boards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_projects_boards ...'
      end
      # resource path
      local_var_path = '/projects/boards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectBoardsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_projects_boards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_projects_boards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get project phases
    # Returns all active project phases under a specific board.
    # @param board_id [Integer] ID of the board for which phases are requested
    # @param [Hash] opts the optional parameters
    # @return [GetProjectPhasesResponse200]
    def get_projects_phases(board_id, opts = {})
      data, _status_code, _headers = get_projects_phases_with_http_info(board_id, opts)
      data
    end

    # Get project phases
    # Returns all active project phases under a specific board.
    # @param board_id [Integer] ID of the board for which phases are requested
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProjectPhasesResponse200, Integer, Hash)>] GetProjectPhasesResponse200 data, response status code and response headers
    def get_projects_phases_with_http_info(board_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_projects_phases ...'
      end
      # verify the required parameter 'board_id' is set
      if @api_client.config.client_side_validation && board_id.nil?
        fail ArgumentError, "Missing the required parameter 'board_id' when calling ProjectsApi.get_projects_phases"
      end
      # resource path
      local_var_path = '/projects/phases'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'board_id'] = board_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProjectPhasesResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_projects_phases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_projects_phases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update activity in project plan
    # Updates an activity phase or group in a project.
    # @param id [Integer] The ID of the project
    # @param activity_id [Integer] The ID of the activity
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectPutPlanItemBodyObject] :project_put_plan_item_body_object 
    # @return [UpdatedActivityPlanItem200]
    def put_project_plan_activity(id, activity_id, opts = {})
      data, _status_code, _headers = put_project_plan_activity_with_http_info(id, activity_id, opts)
      data
    end

    # Update activity in project plan
    # Updates an activity phase or group in a project.
    # @param id [Integer] The ID of the project
    # @param activity_id [Integer] The ID of the activity
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectPutPlanItemBodyObject] :project_put_plan_item_body_object 
    # @return [Array<(UpdatedActivityPlanItem200, Integer, Hash)>] UpdatedActivityPlanItem200 data, response status code and response headers
    def put_project_plan_activity_with_http_info(id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.put_project_plan_activity ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.put_project_plan_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ProjectsApi.put_project_plan_activity"
      end
      # resource path
      local_var_path = '/projects/{id}/plan/activities/{activityId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'activityId' + '}', CGI.escape(activity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'project_put_plan_item_body_object'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatedActivityPlanItem200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.put_project_plan_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#put_project_plan_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update task in project plan
    # Updates a task phase or group in a project.
    # @param id [Integer] The ID of the project
    # @param task_id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectPutPlanItemBodyObject] :project_put_plan_item_body_object 
    # @return [UpdatedTaskPlanItem200]
    def put_project_plan_task(id, task_id, opts = {})
      data, _status_code, _headers = put_project_plan_task_with_http_info(id, task_id, opts)
      data
    end

    # Update task in project plan
    # Updates a task phase or group in a project.
    # @param id [Integer] The ID of the project
    # @param task_id [Integer] The ID of the task
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectPutPlanItemBodyObject] :project_put_plan_item_body_object 
    # @return [Array<(UpdatedTaskPlanItem200, Integer, Hash)>] UpdatedTaskPlanItem200 data, response status code and response headers
    def put_project_plan_task_with_http_info(id, task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.put_project_plan_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.put_project_plan_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling ProjectsApi.put_project_plan_task"
      end
      # resource path
      local_var_path = '/projects/{id}/plan/tasks/{taskId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'taskId' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'project_put_plan_item_body_object'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatedTaskPlanItem200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.put_project_plan_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#put_project_plan_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a project
    # Updates a project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProjectRequest] :update_project_request 
    # @return [UpdateProjectResponse200]
    def update_project(id, opts = {})
      data, _status_code, _headers = update_project_with_http_info(id, opts)
      data
    end

    # Update a project
    # Updates a project.
    # @param id [Integer] The ID of the project
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProjectRequest] :update_project_request 
    # @return [Array<(UpdateProjectResponse200, Integer, Hash)>] UpdateProjectResponse200 data, response status code and response headers
    def update_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.update_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjectsApi.update_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_project_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateProjectResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"ProjectsApi.update_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
