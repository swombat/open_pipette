=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class LeadLabelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a lead label
    # Creates a lead label.
    # @param [Hash] opts the optional parameters
    # @option opts [AddLeadLabelRequest] :add_lead_label_request 
    # @return [AddOrUpdateLeadLabelResponse200]
    def add_lead_label(opts = {})
      data, _status_code, _headers = add_lead_label_with_http_info(opts)
      data
    end

    # Add a lead label
    # Creates a lead label.
    # @param [Hash] opts the optional parameters
    # @option opts [AddLeadLabelRequest] :add_lead_label_request 
    # @return [Array<(AddOrUpdateLeadLabelResponse200, Integer, Hash)>] AddOrUpdateLeadLabelResponse200 data, response status code and response headers
    def add_lead_label_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadLabelsApi.add_lead_label ...'
      end
      # resource path
      local_var_path = '/leadLabels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_lead_label_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrUpdateLeadLabelResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadLabelsApi.add_lead_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadLabelsApi#add_lead_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a lead label
    # Deletes a specific lead label.
    # @param id [String] The ID of the lead label
    # @param [Hash] opts the optional parameters
    # @return [LeadIdResponse200]
    def delete_lead_label(id, opts = {})
      data, _status_code, _headers = delete_lead_label_with_http_info(id, opts)
      data
    end

    # Delete a lead label
    # Deletes a specific lead label.
    # @param id [String] The ID of the lead label
    # @param [Hash] opts the optional parameters
    # @return [Array<(LeadIdResponse200, Integer, Hash)>] LeadIdResponse200 data, response status code and response headers
    def delete_lead_label_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadLabelsApi.delete_lead_label ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadLabelsApi.delete_lead_label"
      end
      # resource path
      local_var_path = '/leadLabels/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LeadIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadLabelsApi.delete_lead_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadLabelsApi#delete_lead_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all lead labels
    # Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
    # @param [Hash] opts the optional parameters
    # @return [GetLeadLabelsResponse200]
    def get_lead_labels(opts = {})
      data, _status_code, _headers = get_lead_labels_with_http_info(opts)
      data
    end

    # Get all lead labels
    # Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLeadLabelsResponse200, Integer, Hash)>] GetLeadLabelsResponse200 data, response status code and response headers
    def get_lead_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadLabelsApi.get_lead_labels ...'
      end
      # resource path
      local_var_path = '/leadLabels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLeadLabelsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadLabelsApi.get_lead_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadLabelsApi#get_lead_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lead label
    # Updates one or more properties of a lead label. Only properties included in the request will be updated. 
    # @param id [String] The ID of the lead label
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateLeadLabelRequest] :update_lead_label_request 
    # @return [AddOrUpdateLeadLabelResponse200]
    def update_lead_label(id, opts = {})
      data, _status_code, _headers = update_lead_label_with_http_info(id, opts)
      data
    end

    # Update a lead label
    # Updates one or more properties of a lead label. Only properties included in the request will be updated. 
    # @param id [String] The ID of the lead label
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateLeadLabelRequest] :update_lead_label_request 
    # @return [Array<(AddOrUpdateLeadLabelResponse200, Integer, Hash)>] AddOrUpdateLeadLabelResponse200 data, response status code and response headers
    def update_lead_label_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadLabelsApi.update_lead_label ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadLabelsApi.update_lead_label"
      end
      # resource path
      local_var_path = '/leadLabels/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_lead_label_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrUpdateLeadLabelResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadLabelsApi.update_lead_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadLabelsApi#update_lead_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
