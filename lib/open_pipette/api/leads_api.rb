=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenPipette
  class LeadsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a lead
    # Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to `API`. Here's the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-lead\" target=\"_blank\" rel=\"noopener noreferrer\">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields' values tutorial</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [AddLeadRequest] :add_lead_request 
    # @return [OneLeadResponse200]
    def add_lead(opts = {})
      data, _status_code, _headers = add_lead_with_http_info(opts)
      data
    end

    # Add a lead
    # Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source and origin set to &#x60;API&#x60;. Here&#39;s the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-lead\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a lead&lt;/a&gt;. If a lead contains custom fields, the fields&#39; values will be included in the response in the same format as with the &#x60;Deals&#x60; endpoints. If a custom field&#39;s value hasn&#39;t been set for the lead, it won&#39;t appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields&#39; structure from deals. See an example given in the &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/updating-custom-field-value\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;updating custom fields&#39; values tutorial&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [AddLeadRequest] :add_lead_request 
    # @return [Array<(OneLeadResponse200, Integer, Hash)>] OneLeadResponse200 data, response status code and response headers
    def add_lead_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.add_lead ...'
      end
      # resource path
      local_var_path = '/leads'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_lead_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OneLeadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.add_lead",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#add_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a lead
    # Deletes a specific lead.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [LeadIdResponse200]
    def delete_lead(id, opts = {})
      data, _status_code, _headers = delete_lead_with_http_info(id, opts)
      data
    end

    # Delete a lead
    # Deletes a specific lead.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [Array<(LeadIdResponse200, Integer, Hash)>] LeadIdResponse200 data, response status code and response headers
    def delete_lead_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.delete_lead ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadsApi.delete_lead"
      end
      # resource path
      local_var_path = '/leads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LeadIdResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.delete_lead",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#delete_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get one lead
    # Returns details of a specific lead. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [OneLeadResponse200]
    def get_lead(id, opts = {})
      data, _status_code, _headers = get_lead_with_http_info(id, opts)
      data
    end

    # Get one lead
    # Returns details of a specific lead. If a lead contains custom fields, the fields&#39; values will be included in the response in the same format as with the &#x60;Deals&#x60; endpoints. If a custom field&#39;s value hasn&#39;t been set for the lead, it won&#39;t appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [Array<(OneLeadResponse200, Integer, Hash)>] OneLeadResponse200 data, response status code and response headers
    def get_lead_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.get_lead ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadsApi.get_lead"
      end
      # resource path
      local_var_path = '/leads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OneLeadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.get_lead",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#get_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List permitted users
    # Lists the users permitted to access a lead.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [UserIds]
    def get_lead_users(id, opts = {})
      data, _status_code, _headers = get_lead_users_with_http_info(id, opts)
      data
    end

    # List permitted users
    # Lists the users permitted to access a lead.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserIds, Integer, Hash)>] UserIds data, response status code and response headers
    def get_lead_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.get_lead_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadsApi.get_lead_users"
      end
      # resource path
      local_var_path = '/leads/{id}/permittedUsers'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.get_lead_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#get_lead_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all leads
    # Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    # @option opts [Integer] :start For pagination, the position that represents the first result for the page
    # @option opts [String] :archived_status Filtering based on the archived status of a lead. If not provided, &#x60;All&#x60; is used.
    # @option opts [Integer] :owner_id If supplied, only leads matching the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owner_id&#x60; when supplied.
    # @option opts [Integer] :person_id If supplied, only leads matching the given person will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;person_id&#x60; when supplied.
    # @option opts [Integer] :organization_id If supplied, only leads matching the given organization will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;organization_id&#x60; when supplied.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
    # @return [GetLeadsResponse200]
    def get_leads(opts = {})
      data, _status_code, _headers = get_leads_with_http_info(opts)
      data
    end

    # Get all leads
    # Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using &#x60;limit&#x60; and &#x60;start&#x60; query parameters. If a lead contains custom fields, the fields&#39; values will be included in the response in the same format as with the &#x60;Deals&#x60; endpoints. If a custom field&#39;s value hasn&#39;t been set for the lead, it won&#39;t appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields&#39; structure from deals. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    # @option opts [Integer] :start For pagination, the position that represents the first result for the page
    # @option opts [String] :archived_status Filtering based on the archived status of a lead. If not provided, &#x60;All&#x60; is used.
    # @option opts [Integer] :owner_id If supplied, only leads matching the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owner_id&#x60; when supplied.
    # @option opts [Integer] :person_id If supplied, only leads matching the given person will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;person_id&#x60; when supplied.
    # @option opts [Integer] :organization_id If supplied, only leads matching the given organization will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;organization_id&#x60; when supplied.
    # @option opts [Integer] :filter_id The ID of the filter to use
    # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
    # @return [Array<(GetLeadsResponse200, Integer, Hash)>] GetLeadsResponse200 data, response status code and response headers
    def get_leads_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.get_leads ...'
      end
      allowable_values = ["archived", "not_archived", "all"]
      if @api_client.config.client_side_validation && opts[:'archived_status'] && !allowable_values.include?(opts[:'archived_status'])
        fail ArgumentError, "invalid value for \"archived_status\", must be one of #{allowable_values}"
      end
      allowable_values = ["id", "title", "owner_id", "creator_id", "was_seen", "expected_close_date", "next_activity_id", "add_time", "update_time"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/leads'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'archived_status'] = opts[:'archived_status'] if !opts[:'archived_status'].nil?
      query_params[:'owner_id'] = opts[:'owner_id'] if !opts[:'owner_id'].nil?
      query_params[:'person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'organization_id'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'filter_id'] = opts[:'filter_id'] if !opts[:'filter_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLeadsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.get_leads",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#get_leads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search leads
    # Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [Integer] :person_id Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
    # @option opts [Integer] :organization_id Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [SearchLeadsResponse200]
    def search_leads(term, opts = {})
      data, _status_code, _headers = search_leads_with_http_info(term, opts)
      data
    end

    # Search leads
    # Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of &lt;a href&#x3D;\&quot;https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\&quot;&gt;/v1/itemSearch&lt;/a&gt; with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
    # @param term [String] The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
    # @option opts [Integer] :person_id Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
    # @option opts [Integer] :organization_id Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
    # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
    # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter. (default to 0)
    # @option opts [Integer] :limit Items shown per page
    # @return [Array<(SearchLeadsResponse200, Integer, Hash)>] SearchLeadsResponse200 data, response status code and response headers
    def search_leads_with_http_info(term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.search_leads ...'
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling LeadsApi.search_leads"
      end
      allowable_values = ["custom_fields", "notes", "title"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !allowable_values.include?(opts[:'fields'])
        fail ArgumentError, "invalid value for \"fields\", must be one of #{allowable_values}"
      end
      allowable_values = ["lead.was_seen"]
      if @api_client.config.client_side_validation && opts[:'include_fields'] && !allowable_values.include?(opts[:'include_fields'])
        fail ArgumentError, "invalid value for \"include_fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/leads/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'term'] = term
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'exact_match'] = opts[:'exact_match'] if !opts[:'exact_match'].nil?
      query_params[:'person_id'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'organization_id'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'include_fields'] = opts[:'include_fields'] if !opts[:'include_fields'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchLeadsResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.search_leads",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#search_leads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a lead
    # Updates one or more properties of a lead. Only properties included in the request will be updated. Send `null` to unset a property (applicable for example for `value`, `person_id` or `organization_id`). If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals. See an example given in the <a href=\"https://pipedrive.readme.io/docs/updating-custom-field-value\" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields’ values tutorial</a>.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateLeadRequest] :update_lead_request 
    # @return [OneLeadResponse200]
    def update_lead(id, opts = {})
      data, _status_code, _headers = update_lead_with_http_info(id, opts)
      data
    end

    # Update a lead
    # Updates one or more properties of a lead. Only properties included in the request will be updated. Send &#x60;null&#x60; to unset a property (applicable for example for &#x60;value&#x60;, &#x60;person_id&#x60; or &#x60;organization_id&#x60;). If a lead contains custom fields, the fields&#39; values will be included in the response in the same format as with the &#x60;Deals&#x60; endpoints. If a custom field&#39;s value hasn&#39;t been set for the lead, it won&#39;t appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals. See an example given in the &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/updating-custom-field-value\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;updating custom fields’ values tutorial&lt;/a&gt;.
    # @param id [String] The ID of the lead
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateLeadRequest] :update_lead_request 
    # @return [Array<(OneLeadResponse200, Integer, Hash)>] OneLeadResponse200 data, response status code and response headers
    def update_lead_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LeadsApi.update_lead ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LeadsApi.update_lead"
      end
      # resource path
      local_var_path = '/leads/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_lead_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OneLeadResponse200'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"LeadsApi.update_lead",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LeadsApi#update_lead\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
