=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenPipette::PersonsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PersonsApi' do
  before do
    # run before each test
    @api_instance = OpenPipette::PersonsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PersonsApi' do
    it 'should create an instance of PersonsApi' do
      expect(@api_instance).to be_instance_of(OpenPipette::PersonsApi)
    end
  end

  # unit tests for add_person
  # Add a person
  # Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for &#x60;key&#x60; values.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the &#x60;data.marketing_status&#x60; field.
  # @param [Hash] opts the optional parameters
  # @option opts [AddPersonRequest] :add_person_request 
  # @return [AddPersonResponse200]
  describe 'add_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_person_follower
  # Add a follower to a person
  # Adds a follower to a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [AddPersonFollowerRequest] :add_person_follower_request 
  # @return [AddPersonFollowerResponse200]
  describe 'add_person_follower test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_person_picture
  # Add person picture
  # Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
  # @param id The ID of the person
  # @param file One image supplied in the multipart/form-data encoding
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :crop_x X coordinate to where start cropping form (in pixels)
  # @option opts [Integer] :crop_y Y coordinate to where start cropping form (in pixels)
  # @option opts [Integer] :crop_width The width of the cropping area (in pixels)
  # @option opts [Integer] :crop_height The height of the cropping area (in pixels)
  # @return [AddPersonPictureResponse200]
  describe 'add_person_picture test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_person
  # Delete a person
  # Marks a person as deleted. After 30 days, the person will be permanently deleted.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @return [DeletePersonResponse200]
  describe 'delete_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_person_follower
  # Delete a follower from a person
  # Deletes a follower from a person.
  # @param id The ID of the person
  # @param follower_id The ID of the follower
  # @param [Hash] opts the optional parameters
  # @return [DeletePersonResponse200]
  describe 'delete_person_follower test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_person_picture
  # Delete person picture
  # Deletes a personâ€™s picture.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @return [DeletePersonResponse200]
  describe 'delete_person_picture test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_persons
  # Delete multiple persons in bulk
  # Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
  # @param ids The comma-separated IDs that will be deleted
  # @param [Hash] opts the optional parameters
  # @return [DeletePersonsResponse200]
  describe 'delete_persons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person
  # Get details of a person
  # Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the &#x60;key&#x60; value of personFields.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the &#x60;data.marketing_status&#x60; field.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @return [GetPersonResponse200]
  describe 'get_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_activities
  # List activities associated with a person
  # Lists activities associated with a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [Float] :done Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
  # @option opts [String] :exclude A comma-separated string of activity IDs to exclude from result
  # @return [GetAssociatedActivitiesResponse200]
  describe 'get_person_activities test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_changelog
  # List updates about person field values
  # Lists updates about field values of a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
  # @option opts [Integer] :limit Items shown per page
  # @return [GetChangelogResponse200]
  describe 'get_person_changelog test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_deals
  # List deals associated with a person
  # Lists deals associated with a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [String] :status Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
  # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
  # @return [GetAssociatedDealsResponse200]
  describe 'get_person_deals test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_files
  # List files attached to a person
  # Lists files associated with a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
  # @return [GetAssociatedFilesResponse200]
  describe 'get_person_files test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_followers
  # List followers of a person
  # Lists the followers of a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @return [GetAssociatedFollowersResponse200]
  describe 'get_person_followers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_mail_messages
  # List mail messages associated with a person
  # Lists mail messages associated with a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @return [GetAssociatedMailMessagesResponse200]
  describe 'get_person_mail_messages test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_products
  # List products associated with a person
  # Lists products associated with a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @return [GetPersonProductsResponse200]
  describe 'get_person_products test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_updates
  # List updates about a person
  # Lists updates about a person.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint&#39;s response will also include updates for the &#x60;marketing_status&#x60; field.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [String] :all_changes Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
  # @option opts [String] :items A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
  # @return [GetAssociatedPersonUpdatesResponse200]
  describe 'get_person_updates test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_person_users
  # List permitted users
  # List users permitted to access a person.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @return [ListPermittedUsersResponse2001]
  describe 'get_person_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_persons
  # Get all persons
  # Returns all persons.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :user_id If supplied, only persons owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
  # @option opts [Integer] :filter_id The ID of the filter to use
  # @option opts [String] :first_char If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
  # @return [GetPersonsResponse200]
  describe 'get_persons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_persons_collection
  # Get all persons (BETA)
  # Returns all persons. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/core-api-concepts-pagination\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;pagination&lt;/a&gt;. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/global-user-management\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor For pagination, the marker (an opaque string value) representing the first item on the next page
  # @option opts [Integer] :limit For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
  # @option opts [String] :since The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
  # @option opts [String] :_until The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
  # @option opts [Integer] :owner_id If supplied, only persons owned by the given user will be returned
  # @option opts [String] :first_char If supplied, only persons whose name starts with the specified letter will be returned (case-insensitive)
  # @return [GetPersonsCollection200Response]
  describe 'get_persons_collection test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for merge_persons
  # Merge two persons
  # Merges a person with another person. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/merging-two-persons\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;merging two persons&lt;/a&gt;.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [MergePersonsRequest] :merge_persons_request 
  # @return [MergePersonsResponse200]
  describe 'merge_persons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_persons
  # Search persons
  # Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of &lt;a href&#x3D;\&quot;https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\&quot;&gt;/v1/itemSearch&lt;/a&gt; with a narrower OAuth scope. Found persons can be filtered by organization ID.
  # @param term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
  # @option opts [Boolean] :exact_match When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
  # @option opts [Integer] :organization_id Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
  # @option opts [String] :include_fields Supports including optional fields in the results which are not provided by default
  # @option opts [Integer] :start Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
  # @option opts [Integer] :limit Items shown per page
  # @return [SearchPersonsResponse200]
  describe 'search_persons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_person
  # Update a person
  # Updates the properties of a person. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/updating-a-person\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;updating a person&lt;/a&gt;.&lt;br&gt;If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the &#x60;data.marketing_status&#x60; field.
  # @param id The ID of the person
  # @param [Hash] opts the optional parameters
  # @option opts [UpdatePersonRequest] :update_person_request 
  # @return [UpdatePersonResponse200]
  describe 'update_person test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
