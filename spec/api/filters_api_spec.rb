=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenPipette::FiltersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FiltersApi' do
  before do
    # run before each test
    @api_instance = OpenPipette::FiltersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FiltersApi' do
    it 'should create an instance of FiltersApi' do
      expect(@api_instance).to be_instance_of(OpenPipette::FiltersApi)
    end
  end

  # unit tests for add_filter
  # Add a new filter
  # Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with &#39;AND&#39;, and only two second level condition groups are supported of which one must be glued with &#39;AND&#39; and the second with &#39;OR&#39;. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-filter\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a filter&lt;/a&gt;.
  # @param [Hash] opts the optional parameters
  # @option opts [AddFilterRequest] :add_filter_request 
  # @return [PostFilterResponse200]
  describe 'add_filter test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_filter
  # Delete a filter
  # Marks a filter as deleted.
  # @param id The ID of the filter
  # @param [Hash] opts the optional parameters
  # @return [DeleteFilterResponse200]
  describe 'delete_filter test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_filters
  # Delete multiple filters in bulk
  # Marks multiple filters as deleted.
  # @param ids The comma-separated filter IDs to delete
  # @param [Hash] opts the optional parameters
  # @return [DeleteFiltersResponse200]
  describe 'delete_filters test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_filter
  # Get one filter
  # Returns data about a specific filter. Note that this also returns the condition lines of the filter.
  # @param id The ID of the filter
  # @param [Hash] opts the optional parameters
  # @return [GetFilterResponse200]
  describe 'get_filter test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_filter_helpers
  # Get all filter helpers
  # Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to &lt;a href&#x3D;\&quot;/docs/api/v1/Filters#addFilter\&quot;&gt;add&lt;/a&gt; or &lt;a href&#x3D;\&quot;/docs/api/v1/Filters#updateFilter\&quot;&gt;update&lt;/a&gt; filters. For more information, see the tutorial for &lt;a href&#x3D;\&quot;https://pipedrive.readme.io/docs/adding-a-filter\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;adding a filter&lt;/a&gt;.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_filter_helpers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_filters
  # Get all filters
  # Returns data about all filters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type The types of filters to fetch
  # @return [GetFiltersResponse200]
  describe 'get_filters test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_filter
  # Update filter
  # Updates an existing filter.
  # @param id The ID of the filter
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateFilterRequest] :update_filter_request 
  # @return [PostFilterResponse200]
  describe 'update_filter test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
