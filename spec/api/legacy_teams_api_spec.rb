=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenPipette::LegacyTeamsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'LegacyTeamsApi' do
  before do
    # run before each test
    @api_instance = OpenPipette::LegacyTeamsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LegacyTeamsApi' do
    it 'should create an instance of LegacyTeamsApi' do
      expect(@api_instance).to be_instance_of(OpenPipette::LegacyTeamsApi)
    end
  end

  # unit tests for add_team
  # Add a new team
  # Adds a new team to the company and returns the created object.
  # @param [Hash] opts the optional parameters
  # @option opts [AddTeamRequest] :add_team_request 
  # @return [TeamResponse200]
  describe 'add_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_team_user
  # Add users to a team
  # Adds users to an existing team.
  # @param id The ID of the team
  # @param [Hash] opts the optional parameters
  # @option opts [AddTeamUserRequest] :add_team_user_request 
  # @return [UserIds]
  describe 'add_team_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_team_user
  # Delete users from a team
  # Deletes users from an existing team.
  # @param id The ID of the team
  # @param [Hash] opts the optional parameters
  # @option opts [DeleteTeamUserRequest] :delete_team_user_request 
  # @return [UserIds]
  describe 'delete_team_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_team
  # Get a single team
  # Returns data about a specific team.
  # @param id The ID of the team
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users
  # @return [TeamResponse200]
  describe 'get_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_team_users
  # Get all users in a team
  # Returns a list of all user IDs within a team.
  # @param id The ID of the team
  # @param [Hash] opts the optional parameters
  # @return [UserIds]
  describe 'get_team_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_teams
  # Get all teams
  # Returns data about teams within the company.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :order_by The field name to sort returned teams by
  # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users
  # @return [TeamsResponse200]
  describe 'get_teams test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_teams
  # Get all teams of a user
  # Returns data about all teams which have the specified user as a member.
  # @param id The ID of the user
  # @param [Hash] opts the optional parameters
  # @option opts [String] :order_by The field name to sort returned teams by
  # @option opts [Float] :skip_users When enabled, the teams will not include IDs of member users
  # @return [TeamsResponse200]
  describe 'get_user_teams test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_team
  # Update a team
  # Updates an existing team and returns the updated object.
  # @param id The ID of the team
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateTeamRequest] :update_team_request 
  # @return [TeamResponse200]
  describe 'update_team test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
