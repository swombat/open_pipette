=begin
#Pipedrive API v1

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenPipette::NotesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NotesApi' do
  before do
    # run before each test
    @api_instance = OpenPipette::NotesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NotesApi' do
    it 'should create an instance of NotesApi' do
      expect(@api_instance).to be_instance_of(OpenPipette::NotesApi)
    end
  end

  # unit tests for add_note
  # Add a note
  # Adds a new note.
  # @param [Hash] opts the optional parameters
  # @option opts [AddNoteRequest] :add_note_request 
  # @return [OneNoteResponse200]
  describe 'add_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_note_comment
  # Add a comment to a note
  # Adds a new comment to a note.
  # @param id The ID of the note
  # @param [Hash] opts the optional parameters
  # @option opts [CommentPostPutObject] :comment_post_put_object 
  # @return [OneCommentResponse200]
  describe 'add_note_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_comment
  # Delete a comment related to a note
  # Deletes a comment.
  # @param id The ID of the note
  # @param comment_id The ID of the comment
  # @param [Hash] opts the optional parameters
  # @return [DeleteCommentResponse200]
  describe 'delete_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_note
  # Delete a note
  # Deletes a specific note.
  # @param id The ID of the note
  # @param [Hash] opts the optional parameters
  # @return [DeleteNoteResponse200]
  describe 'delete_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_comment
  # Get one comment
  # Returns the details of a comment.
  # @param id The ID of the note
  # @param comment_id The ID of the comment
  # @param [Hash] opts the optional parameters
  # @return [OneCommentResponse200]
  describe 'get_comment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_note
  # Get one note
  # Returns details about a specific note.
  # @param id The ID of the note
  # @param [Hash] opts the optional parameters
  # @return [OneNoteResponse200]
  describe 'get_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_note_comments
  # Get all comments for a note
  # Returns all comments associated with a note.
  # @param id The ID of the note
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @return [GetCommentsResponse200]
  describe 'get_note_comments test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_notes
  # Get all notes
  # Returns all notes.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :user_id The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
  # @option opts [String] :lead_id The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
  # @option opts [Integer] :deal_id The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
  # @option opts [Integer] :person_id The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
  # @option opts [Integer] :org_id The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
  # @option opts [Integer] :start Pagination start
  # @option opts [Integer] :limit Items shown per page
  # @option opts [String] :sort The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
  # @option opts [Date] :start_date The date in format of YYYY-MM-DD from which notes to fetch
  # @option opts [Date] :end_date The date in format of YYYY-MM-DD until which notes to fetch to
  # @option opts [Float] :pinned_to_lead_flag If set, the results are filtered by note to lead pinning state
  # @option opts [Float] :pinned_to_deal_flag If set, the results are filtered by note to deal pinning state
  # @option opts [Float] :pinned_to_organization_flag If set, the results are filtered by note to organization pinning state
  # @option opts [Float] :pinned_to_person_flag If set, the results are filtered by note to person pinning state
  # @return [GetNotesResponse200]
  describe 'get_notes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_comment_for_note
  # Update a comment related to a note
  # Updates a comment related to a note.
  # @param id The ID of the note
  # @param comment_id The ID of the comment
  # @param [Hash] opts the optional parameters
  # @option opts [CommentPostPutObject] :comment_post_put_object 
  # @return [OneCommentResponse200]
  describe 'update_comment_for_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_note
  # Update a note
  # Updates a note.
  # @param id The ID of the note
  # @param [Hash] opts the optional parameters
  # @option opts [NoteRequest] :note_request 
  # @return [OneNoteResponse200]
  describe 'update_note test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
